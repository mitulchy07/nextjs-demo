{"kind":"FETCH","data":{"headers":{"accept-ranges":"bytes","access-control-allow-origin":"*","cache-control":"max-age=300","connection":"keep-alive","content-encoding":"gzip","content-length":"39428","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","content-type":"text/plain; charset=utf-8","date":"Tue, 14 Mar 2023 12:26:15 GMT","etag":"W/\"55b8e1b9547bc0b16c8f2de57028f0a7ed84c10fbc4c7715c48ae951f2bc7e67\"","expires":"Tue, 14 Mar 2023 12:31:15 GMT","source-age":"0","strict-transport-security":"max-age=31536000","vary":"Authorization,Accept-Encoding,Origin","via":"1.1 varnish","x-cache":"MISS","x-cache-hits":"0","x-content-type-options":"nosniff","x-fastly-request-id":"52f6a6b6d512e41c8f05faa22500231a2f0b34f0","x-frame-options":"deny","x-github-request-id":"8A86:1442:1F227AE:20C730B:641067E7","x-served-by":"cache-par-lfpg1960087-PAR","x-timer":"S1678796776.707459,VS0,VE213","x-xss-protection":"1; mode=block"},"body":"{
  "speakers": [
    {
      "id": "381b010e-f51d-4fca-a249-271f72a6a5b9",
      "bio": "Anim anim cupidatat cupidatat consequat nisi mollit velit officia nulla et eiusmod enim. Irure incididunt non irure in est veniam aliquip fugiat nulla magna et commodo. Culpa nisi magna ullamco ipsum in. Enim nostrud irure do ea dolore deserunt eiusmod pariatur mollit nisi ex minim eiusmod nisi mollit.",
      "sessions": [
        {
          "id": 129718,
          "name": "Batching Vs Streaming"
        }
      ],
      "name": "Macey Duncan",
      "featured": true
    },
    {
      "id": "c5e306ae-3f40-4ff0-92a2-503e2f1dc6a1",
      "bio": "Ex amet elit anim qui consectetur fugiat consequat dolor occaecat. Pariatur eu duis dolore do commodo nisi consequat enim est pariatur eiusmod adipisicing esse labore ut. Laborum et ex aliqua esse Lorem aliqua. Mollit nulla nostrud enim ut proident commodo deserunt occaecat ex elit ex est.\nEsse enim nulla dolore sint incididunt enim eu eu aute aliqua laboris deserunt eiusmod. Reprehenderit et proident nisi laborum ex minim velit. Aliqua laboris et nulla laborum amet sint irure ad tempor. Nulla do officia labore. Ut amet aute ex proident. Enim sint aliqua occaecat voluptate adipisicing dolore proident.",
      "sessions": [
        {
          "id": 85318,
          "name": "Azure you want to use AWS IoT?"
        }
      ],
      "name": "Jerome Parker",
      "featured": true
    },
    {
      "id": "aa24b5ca-5b96-4657-909e-e5be82ebf891",
      "bio": "Amet veniam nisi tempor exercitation exercitation. Velit id ullamco qui ut ex sint mollit sint. Sit minim non commodo occaecat nisi aliquip. Commodo magna laborum ex cillum eiusmod cillum occaecat cupidatat anim non mollit laboris.\nSunt irure pariatur minim. Sunt minim esse quis nulla laboris est in laboris minim tempor culpa in irure. Anim incididunt cillum esse veniam tempor. Proident velit anim aliqua et labore id. Tempor anim eu ex aliqua adipisicing et. Duis elit ad amet quis ex laborum cupidatat amet sunt et ipsum velit anim.",
      "sessions": [
        {
          "id": 83482,
          "name": "React Native: The Big Picture"
        },
        {
          "id": 83492,
          "name": "GraphQL - The Big Picture"
        }
      ],
      "name": "West Larson"
    },
    {
      "id": "1491c981-bbb2-4db3-b89a-3a7434451fed",
      "bio": "In fugiat officia et labore do occaecat qui esse dolor quis ullamco mollit sint excepteur irure. Aliquip non irure sunt. Sit sint nisi eu. Irure nisi ad qui laboris eu quis laboris cillum.",
      "sessions": [
        {
          "id": 78147,
          "name": "Rapid Cross-Platform AR Development with React Native"
        }
      ],
      "name": "Xoan Chapman"
    },
    {
      "id": "223d2b9d-a582-4e14-bebb-d636fb030bda",
      "bio": "Nulla sint est enim aliqua exercitation pariatur nostrud sint aute tempor deserunt officia. Occaecat irure anim enim nisi laboris laborum anim nulla aliqua duis tempor consequat ad voluptate cupidatat. Sint minim non qui id incididunt. Proident ea labore eiusmod. Cillum reprehenderit occaecat aute anim veniam consequat laboris ipsum ad officia nisi aliqua nisi. Ad consectetur labore incididunt do duis mollit magna consectetur. Labore dolor eiusmod nisi veniam sit consectetur anim ut sit qui. Ut officia eu eiusmod nulla laboris dolor nostrud labore velit officia dolore aliquip officia culpa consequat.\nAute ad elit consectetur proident minim consectetur nisi veniam Lorem elit dolore. Aute in aliqua occaecat velit quis sint fugiat in laboris officia do ut magna ut. Fugiat commodo commodo tempor id ad pariatur. Mollit qui nostrud dolor duis occaecat ipsum ea nostrud enim qui tempor ipsum. Id labore esse commodo pariatur dolor id fugiat nostrud incididunt deserunt mollit tempor.",
      "sessions": [
        {
          "id": 86452,
          "name": "Getting your head around .NET Standard 2.1"
        }
      ],
      "name": "Reed Watts"
    },
    {
      "id": "0a8d8acd-7224-4746-8cb6-5eeee2626bf4",
      "bio": "Laboris proident excepteur pariatur non ut cillum sit aliqua cillum nisi ad minim magna occaecat. Duis irure commodo amet occaecat Lorem labore et incididunt sint culpa nulla. Non cupidatat sit do adipisicing consectetur aliquip labore dolor ea elit nisi dolor voluptate ex. Culpa cillum nulla ea exercitation commodo eu id cillum. Cupidatat laborum sunt reprehenderit occaecat tempor eiusmod sint exercitation dolor voluptate aliquip proident nostrud ipsum voluptate. Ullamco occaecat aliquip sint id eiusmod qui mollit magna ut.",
      "sessions": [
        {
          "id": 84694,
          "name": "Building a QA practice from scratch"
        }
      ],
      "name": "Ripley Vargas"
    },
    {
      "id": "e8eb22dd-d167-4efa-ba0e-905c94b38f9b",
      "bio": "Cillum est consectetur magna nostrud eiusmod. Consequat proident velit sunt voluptate dolor officia consequat ullamco occaecat officia reprehenderit sunt. Irure exercitation consectetur nisi quis nisi. Tempor dolor nisi laboris enim.\nProident qui esse elit ullamco culpa aute do esse fugiat minim. Ipsum veniam dolore esse incididunt nostrud occaecat quis cupidatat nisi aliquip proident voluptate. Eu aute eu consequat nulla reprehenderit anim et labore aliquip quis laboris. Voluptate dolore esse cillum reprehenderit ullamco mollit incididunt. Veniam ad elit ullamco sit aliqua commodo. Ut tempor esse enim excepteur ea officia non ea do exercitation veniam esse est ex consequat. Ea labore velit in voluptate est eu exercitation et culpa adipisicing cillum cillum consectetur fugiat ipsum. Ut culpa ipsum adipisicing nostrud laboris amet consectetur mollit elit excepteur.",
      "sessions": [
        {
          "id": 78175,
          "name": "One of us!  How to break down walls and create cohesive teams"
        },
        {
          "id": 138191,
          "name": "Team Work Makes the Dream Work"
        }
      ],
      "name": "Constance Jimenez"
    },
    {
      "id": "bc6182e1-400e-41c6-aedc-a4a66c5dc236",
      "bio": "Nostrud velit do pariatur sunt. Nulla exercitation pariatur labore veniam duis aliqua culpa esse duis velit cupidatat. Ipsum id aliquip anim excepteur consectetur non do eu cupidatat amet. Officia excepteur non amet in consequat anim anim deserunt adipisicing non sint.\nIncididunt sit anim et. Occaecat tempor dolore non nostrud est est enim ea tempor laborum ut est cupidatat. Ipsum voluptate nulla officia magna qui ut incididunt est voluptate ipsum adipisicing sit. Occaecat duis consectetur eu duis amet. Esse est commodo qui culpa aute. Dolor consequat adipisicing incididunt eu dolor officia do.",
      "sessions": [
        {
          "id": 84932,
          "name": "Stack-Agnostic End-to-End Testing with Jest and Puppeteer"
        }
      ],
      "name": "Travis Oliver"
    },
    {
      "id": "67825076-cfd8-40ab-a163-bf9d9cea66bf",
      "bio": "Fugiat ad aute pariatur. Ipsum amet aliquip laborum proident velit veniam reprehenderit eiusmod cupidatat fugiat proident labore cupidatat. Ea ut anim tempor eu enim duis consequat veniam esse minim tempor. Veniam tempor in occaecat ad exercitation pariatur nostrud nulla quis adipisicing dolor id anim velit cillum. Aute do voluptate ullamco enim do velit occaecat sint cillum aliqua dolore ad. Id eiusmod ullamco eu nostrud mollit in aliqua. Duis consectetur in minim dolore do nulla esse nostrud quis non. Do ad qui aliquip laboris et incididunt nostrud magna dolor proident laborum aliqua id excepteur laborum.",
      "sessions": [
        {
          "id": 81258,
          "name": "Is This a Button? A Question Your Users Should Never Ask."
        }
      ],
      "name": "Rebecca Silva"
    },
    {
      "id": "3c774b73-d976-4916-ac8a-fac04a4bc9ca",
      "bio": "Id ea ad excepteur anim cillum exercitation. Exercitation commodo occaecat amet minim aliqua exercitation commodo. Labore labore incididunt ullamco incididunt aute veniam nisi fugiat laboris do. Elit culpa irure elit exercitation sit exercitation fugiat consequat laborum id Lorem ex. Elit veniam dolore est enim ipsum voluptate sint consectetur anim duis enim quis duis consectetur deserunt. Enim elit esse proident do Lorem nisi eiusmod. Minim minim aliquip aliquip do sint consequat ullamco sint consequat laboris incididunt nulla et. Laborum ullamco duis duis sint ullamco do incididunt officia dolore sunt eiusmod.",
      "sessions": [
        {
          "id": 81977,
          "name": "Just because you can do something, doesn't mean you should!"
        }
      ],
      "name": "Edward Brown"
    },
    {
      "id": "fdf3c776-f100-41f5-bb22-7a1f16710740",
      "bio": "Lorem nostrud irure elit tempor culpa consectetur velit minim non veniam reprehenderit sunt. Laborum laboris amet nisi non sit eu elit enim voluptate ex. Nulla anim cupidatat ipsum in id irure aliqua irure aliquip incididunt anim excepteur officia occaecat. Tempor occaecat ut velit ipsum tempor. Magna exercitation elit irure esse in quis. Enim enim consequat magna fugiat nulla aliquip occaecat elit elit duis tempor.",
      "sessions": [
        {
          "id": 80896,
          "name": "An AI with an Agenda: How Our Cognitive Biases Leak Into Machine Learning"
        }
      ],
      "name": "Memphis Barnes"
    },
    {
      "id": "49d109f0-32cf-4187-aedc-dcfcf234a92e",
      "bio": "Aliquip aliquip do est nulla amet consectetur culpa Lorem eiusmod do laboris irure mollit. Aliquip eiusmod anim consectetur magna non minim. Non non elit elit enim. Nostrud tempor aliqua voluptate consectetur voluptate. Excepteur veniam ea nisi culpa ea labore. Est nulla eiusmod voluptate adipisicing ad et voluptate voluptate anim. Ea duis culpa exercitation commodo culpa quis aliqua aute dolore in magna consequat velit. Incididunt qui sunt sit magna consectetur tempor consequat veniam do.",
      "sessions": [
        {
          "id": 80989,
          "name": "User Experience Pitfalls"
        }
      ],
      "name": "Greg Pierce"
    },
    {
      "id": "66c1e054-83a5-487a-aef3-0d8499f07c6f",
      "bio": "Exercitation sit sunt adipisicing occaecat tempor ullamco mollit deserunt nulla reprehenderit quis deserunt commodo sunt. Pariatur reprehenderit dolor fugiat veniam ut adipisicing est aliqua ullamco labore aliquip tempor Lorem reprehenderit elit. Ipsum nisi nisi tempor eu consectetur. Laboris dolore labore duis adipisicing. Voluptate tempor ea fugiat duis ex aliqua deserunt nostrud reprehenderit in aute id consectetur voluptate. Ut aliqua ipsum cillum do et aute elit quis elit ea qui sit minim in dolor.",
      "sessions": [
        {
          "id": 134848,
          "name": "Testing your React Components"
        }
      ],
      "name": "Shawn Burns"
    },
    {
      "id": "70df25ba-f2b7-4b82-83a7-cbb15a8bf614",
      "bio": "Eu adipisicing aliquip pariatur labore amet amet aliquip proident enim enim duis proident. Tempor magna incididunt sint est duis duis cupidatat esse consequat. Veniam laboris eiusmod proident cillum ullamco deserunt incididunt aute aliquip adipisicing esse. Duis elit irure aliquip veniam quis. Veniam reprehenderit nisi culpa fugiat in et mollit id. Quis sit ullamco ipsum nulla qui magna ad enim est ut eu Lorem nostrud. Tempor tempor ullamco elit nostrud consequat cupidatat tempor fugiat ea fugiat id sint non qui in. Ea ea do labore sint nisi mollit ad deserunt magna exercitation nisi sit non.",
      "sessions": [
        {
          "id": 85771,
          "name": "I Told You to Stand Still ! (Motion Detection Web App with JavaScript)"
        }
      ],
      "name": "Sylvia Brown"
    },
    {
      "id": "451fd96d-6170-4173-8fb6-c2d7f918ad30",
      "bio": "Laborum dolore proident incididunt amet enim et laboris labore id enim officia deserunt. Consequat velit eiusmod duis quis occaecat enim Lorem officia sit sunt. Labore dolor excepteur deserunt Lorem exercitation exercitation exercitation nisi labore sunt est sint consequat exercitation. Ad anim do ad do id consequat irure consequat esse laboris occaecat anim. Voluptate id duis ad laborum. Culpa occaecat est aliqua incididunt qui. Non ea veniam labore enim qui ut ut deserunt est minim laboris deserunt eu proident velit. Reprehenderit laborum mollit nostrud occaecat dolore ullamco reprehenderit exercitation in dolore exercitation fugiat anim laborum ullamco.",
      "sessions": [
        {
          "id": 85649,
          "name": "I Feel the Need for Web Page Speed"
        }
      ],
      "name": "Darrel May"
    },
    {
      "id": "6f426cb0-6261-4f79-b726-b7ffc3b028ff",
      "bio": "Reprehenderit amet enim Lorem Lorem adipisicing occaecat pariatur qui do minim ipsum fugiat est consequat labore. Nostrud aliqua pariatur esse reprehenderit deserunt sit proident aute occaecat aliquip aliquip fugiat quis ea. Reprehenderit dolore magna sit minim dolor ut excepteur ut occaecat nostrud esse veniam fugiat. Nostrud id culpa irure. Officia ex dolor excepteur. Id quis irure excepteur do fugiat.",
      "sessions": [
        {
          "id": 83929,
          "name": "15 Ways to Optimize Spring Boot for the Cloud"
        }
      ],
      "name": "Michele Foster"
    },
    {
      "id": "b48019cd-1c88-49c6-ba3f-6133bea26b3d",
      "bio": "Voluptate qui ex aliquip qui exercitation est reprehenderit velit commodo aliquip excepteur sunt voluptate voluptate. Qui laboris consectetur voluptate consectetur adipisicing excepteur. Proident do incididunt est ullamco non id incididunt dolor ullamco labore et irure labore mollit irure. Amet laboris consectetur veniam eu veniam eu.",
      "sessions": [
        {
          "id": 85438,
          "name": "Supercharge your CI/CD pipeline using Infrastructure as Code and Octopus Deploy"
        }
      ],
      "name": "Connie Castillo"
    },
    {
      "id": "0c4f74c9-6be8-40d0-b588-674d3b783472",
      "bio": "Est amet sit nisi elit aute ea. Sint exercitation labore nisi et ex occaecat aute sint. Quis labore cillum laborum tempor esse quis elit incididunt tempor et magna dolor sunt. Tempor tempor dolore non laboris occaecat anim. Tempor qui mollit culpa proident eu. Esse voluptate pariatur incididunt ex minim. Consequat non officia velit sunt laboris deserunt deserunt nostrud incididunt id nisi incididunt dolor est.\nCupidatat anim incididunt Lorem ad amet do culpa reprehenderit cillum sit veniam consectetur occaecat culpa excepteur. Labore ipsum esse ex cupidatat adipisicing id. Irure consequat id duis. Sit dolore quis quis adipisicing adipisicing officia voluptate amet sit amet sit minim culpa eiusmod.",
      "sessions": [
        {
          "id": 78054,
          "name": "GIT: From beginner to Fearless"
        }
      ],
      "name": "Michele Jenkins"
    },
    {
      "id": "e1139b73-0ee9-4d8d-a9a8-8a57b94fbf9e",
      "bio": "Amet laborum qui exercitation incididunt cupidatat velit irure aute. Ex enim sit minim laborum amet eiusmod tempor aliquip. Est aute laborum duis commodo veniam Lorem magna qui ad pariatur aliqua nisi tempor. Lorem incididunt nostrud do cillum tempor ullamco. Sit consequat voluptate culpa sint et exercitation dolor cupidatat tempor tempor aute deserunt. Dolor ut consectetur aliqua mollit ut quis in mollit laborum ea do magna magna voluptate dolore. Anim irure eu veniam id laboris eu culpa Lorem excepteur dolor quis. Ea commodo officia consectetur eiusmod Lorem minim fugiat deserunt ut quis voluptate non sint eiusmod.",
      "sessions": [
        {
          "id": 83038,
          "name": "Form Field Design"
        }
      ],
      "name": "Ann Gordon"
    },
    {
      "id": "a80b0ca3-88a8-4244-b257-7891cbd84fdc",
      "bio": "Deserunt enim aliqua est est est occaecat cupidatat sit exercitation ullamco eu. Anim nulla duis consequat non. Laboris labore in nulla officia cillum mollit exercitation irure. Exercitation cillum veniam veniam elit elit enim. Ad dolor sit aliquip ad Lorem aliqua. Reprehenderit adipisicing in ut ut ipsum culpa et dolor elit ut ea enim consequat commodo Lorem. Consectetur magna dolore voluptate esse ipsum veniam minim id.",
      "sessions": [
        {
          "id": 132201,
          "name": "The Value of Working in Teams: Tinkertoy Edition"
        }
      ],
      "name": "Eileen Walker"
    },
    {
      "id": "8a64a5ed-e5d8-4d27-911a-6798ab37b851",
      "bio": "Consectetur proident reprehenderit eu aliqua enim ex excepteur magna. Cupidatat duis tempor Lorem nulla deserunt enim velit. Quis elit deserunt commodo occaecat reprehenderit aute cillum. Consectetur anim irure elit pariatur id incididunt enim eiusmod anim. Ad non fugiat deserunt ut proident laboris qui sint excepteur veniam sint ea cillum dolor ipsum. Consequat do do sint sit ullamco in. Esse labore culpa reprehenderit voluptate aliqua sit ad in enim. Laboris id nulla aliquip qui reprehenderit quis aliquip nisi occaecat labore laborum eiusmod incididunt magna commodo.",
      "sessions": [
        {
          "id": 80763,
          "name": "Practical Grid: Get Started with CSS Grid in Practical, Reusable Components"
        }
      ],
      "name": "Ocean Kelley"
    },
    {
      "id": "7f695e1c-2165-4a1e-a3e7-0204cf9cb173",
      "bio": "Sunt pariatur duis aliquip culpa ipsum. Elit minim et non labore nostrud deserunt. Nostrud est nulla ad mollit dolore ex nostrud nostrud qui mollit proident. Aute culpa incididunt ea adipisicing magna ullamco duis. Aliqua consequat cillum cupidatat sit veniam dolor labore laborum qui voluptate. Magna excepteur dolore velit. Esse ea occaecat elit labore aliquip consequat adipisicing veniam enim labore.\nOccaecat culpa in esse anim aliquip quis. Consequat consectetur quis qui labore aute deserunt laborum incididunt quis id anim esse reprehenderit. Ut id sunt dolor id consequat magna ipsum et. Ipsum sunt duis et reprehenderit voluptate.",
      "sessions": [
        {
          "id": 129050,
          "name": "Business Intelligence to Artificial Intelligence"
        }
      ],
      "name": "Sharon Williams"
    },
    {
      "id": "43667691-72b8-4f23-bdec-425c2c6debf9",
      "bio": "Voluptate sint occaecat exercitation ad cillum sint consectetur dolore reprehenderit. Laboris voluptate anim consequat veniam aliquip fugiat. Labore dolore ut id ad proident incididunt consequat ad. Eu enim non ad sunt mollit esse laboris adipisicing proident deserunt qui. Ad amet anim anim sint exercitation est do ea cillum quis in quis incididunt excepteur. Incididunt consequat mollit et proident consequat.\nOfficia ea nostrud duis enim commodo commodo elit. Consectetur reprehenderit adipisicing culpa in laborum anim magna sunt et. Commodo mollit ipsum et commodo tempor proident eiusmod. Duis culpa irure reprehenderit occaecat elit fugiat irure excepteur duis tempor.",
      "sessions": [
        {
          "id": 85291,
          "name": "How Insightful! Grok Your ASP.NET Core Web Apps with Application Insights"
        }
      ],
      "name": "Ashley Howard"
    },
    {
      "id": "62ebafd8-8470-4415-bc16-6949e5c80f5b",
      "bio": "Aliqua in id Lorem. Cillum tempor qui magna eu tempor culpa occaecat consequat elit non ullamco cupidatat fugiat enim dolor. Amet dolore exercitation minim veniam dolore tempor minim. Voluptate quis nulla cillum incididunt culpa. Proident quis in fugiat reprehenderit consequat magna veniam id do dolor reprehenderit cillum fugiat deserunt. Id cillum occaecat enim Lorem laboris. Ut ex fugiat eu proident ipsum et occaecat est commodo consectetur. Cillum officia commodo esse tempor cupidatat exercitation elit sunt proident adipisicing voluptate qui qui et.",
      "sessions": [
        {
          "id": 77737,
          "name": "Establishing a SOLID Foundation – An Intro to Software Design"
        },
        {
          "id": 77742,
          "name": "How To Have Code Reviews Developers Actually Want"
        }
      ],
      "name": "Brandy Neal"
    },
    {
      "id": "2ab36140-1f0d-46b1-85f5-c8f0222a4c4c",
      "bio": "Amet voluptate magna commodo deserunt nisi sunt qui eiusmod eiusmod enim. Culpa exercitation excepteur laboris. Nulla velit culpa eiusmod culpa dolor est enim nulla mollit elit. Qui aliqua dolore ipsum ea non. Aute pariatur nulla culpa aliquip consequat ad mollit laborum pariatur dolore labore. Enim duis nostrud dolore sint excepteur fugiat quis pariatur labore eiusmod.\nQuis adipisicing do et cillum et occaecat. Dolore veniam quis non sit exercitation cupidatat veniam aute ex adipisicing enim aute ea. Reprehenderit quis fugiat Lorem consequat proident aute. Est consequat labore incididunt consequat. Incididunt aute nisi minim amet laborum eiusmod ad ex irure. Aliqua irure sit tempor dolor elit irure ullamco cupidatat est nisi et quis deserunt ad. Elit culpa dolore nulla non fugiat velit anim occaecat voluptate exercitation esse. Mollit consectetur ullamco voluptate laborum non veniam irure.",
      "sessions": [
        {
          "id": 85553,
          "name": "Get Out of Your Lane!"
        }
      ],
      "name": "Katie Holmes"
    },
    {
      "id": "6e30db3e-1cec-441c-9c29-7813738255c1",
      "bio": "Occaecat cupidatat sunt amet ea do eu qui esse sunt est irure veniam nisi irure veniam. Reprehenderit in magna nulla consequat ex elit mollit. Id cupidatat nulla enim commodo dolore eu elit minim esse culpa. Sint incididunt consectetur exercitation quis reprehenderit excepteur enim ullamco veniam deserunt ipsum fugiat mollit consectetur.\nMollit reprehenderit irure fugiat proident amet tempor. Irure cillum nulla voluptate. Laborum incididunt esse mollit. Sint laborum cupidatat occaecat enim qui sunt dolor dolor. In cupidatat fugiat adipisicing et enim enim culpa labore deserunt reprehenderit id officia voluptate.",
      "sessions": [
        {
          "id": 85250,
          "name": "Microservices Hands-on with MicroProfile"
        }
      ],
      "name": "Kurt Anderson"
    },
    {
      "id": "76842364-2733-4aea-a940-7c81195e5120",
      "bio": "Consectetur dolore ea elit nostrud officia mollit in exercitation proident qui ut irure ullamco reprehenderit minim. Id ipsum qui laborum. Adipisicing mollit excepteur veniam ex est commodo consectetur dolor non sint. Eiusmod fugiat et id mollit ipsum veniam sunt sint occaecat adipisicing dolor non officia excepteur exercitation. Dolore ad anim labore labore deserunt consequat cillum aute id ea ut. Occaecat ea magna eiusmod est sit ut cillum reprehenderit Lorem ad cillum cupidatat nostrud dolore adipisicing. Voluptate ad voluptate excepteur aliquip sunt adipisicing veniam dolor ea commodo esse nostrud ut cupidatat.\nEiusmod dolore elit nulla id do culpa reprehenderit excepteur nulla aliquip ipsum duis occaecat laborum Lorem. Esse occaecat anim tempor consequat ullamco consectetur nisi laboris voluptate consequat elit cillum consectetur commodo ad. Sit nulla dolore aliquip sit minim tempor laborum eu duis dolore dolor esse labore non. Nisi duis minim ut proident deserunt cillum ut quis tempor eu eiusmod exercitation sunt sunt minim.",
      "sessions": [
        {
          "id": 77769,
          "name": "Getting Started with Azure SQL Database"
        }
      ],
      "name": "Shae Wallace"
    },
    {
      "id": "23ff4eb2-5c07-4548-85c7-e2cefe63c0cd",
      "bio": "Cupidatat aliquip exercitation eiusmod quis. Tempor commodo ad qui proident culpa. Non do enim veniam incididunt velit eiusmod duis ut fugiat amet anim. Fugiat nostrud est anim commodo labore.\nOccaecat mollit proident adipisicing culpa voluptate labore cupidatat velit sunt fugiat adipisicing sint exercitation et consectetur. Est non commodo ad consequat. Incididunt quis amet cillum consectetur amet voluptate ex. Pariatur laboris eiusmod nostrud dolore nisi ad. Nulla velit cupidatat reprehenderit eu aute excepteur enim. Deserunt quis veniam cillum officia aute mollit laboris. Officia commodo aliquip mollit sint. Aute minim incididunt cupidatat aute.",
      "sessions": [
        {
          "id": 85595,
          "name": "Building Event Driven (Micro) Services"
        }
      ],
      "name": "Camryn Richardson"
    },
    {
      "id": "730a789f-e2a8-483d-91bc-6e794f1b44d5",
      "bio": "Ipsum duis laboris aliqua do labore. Labore cupidatat nisi irure elit esse fugiat esse proident ex duis minim. Ipsum proident culpa ut excepteur aliquip reprehenderit consectetur aliquip exercitation ut ad. Lorem sint veniam commodo tempor aute dolor ea nostrud exercitation commodo ut et. Anim dolor officia aliquip excepteur aliquip tempor irure laborum et incididunt anim quis cillum voluptate nostrud. Et dolor proident pariatur velit nisi esse esse esse reprehenderit sit veniam. Velit adipisicing esse proident veniam ut ad sit laboris aliqua quis reprehenderit.",
      "sessions": [
        {
          "id": 77877,
          "name": "Focusing on Focus"
        }
      ],
      "name": "Ray Lucas"
    },
    {
      "id": "239cf374-ad4d-4877-a5e5-951cb4cd9291",
      "bio": "Enim sit ex velit aliqua magna veniam dolor fugiat eiusmod laborum nostrud ullamco excepteur sunt ut. Culpa est pariatur dolore anim id. Mollit voluptate nisi dolor id id minim Lorem non officia amet aute non esse do non. Ex duis est sint quis dolor incididunt dolore exercitation aute labore minim occaecat. Incididunt laboris commodo proident.",
      "sessions": [
        {
          "id": 80494,
          "name": "SOLID – The five commandments of good software"
        },
        {
          "id": 80493,
          "name": "Works on my machine… Docker for developers"
        }
      ],
      "name": "Clarence Morris"
    },
    {
      "id": "e296f852-2d30-4f51-8cf6-ac3c87b1427e",
      "bio": "Nisi ex sint minim. Cupidatat consectetur labore cillum dolore proident mollit fugiat dolor. Amet mollit adipisicing velit et deserunt ex labore fugiat. Nostrud ullamco aute exercitation ut tempor reprehenderit nostrud reprehenderit Lorem eu ea officia laboris. Dolore anim ad dolor aute nostrud deserunt excepteur elit tempor. Consequat qui minim sunt. Dolor pariatur veniam est laborum nisi mollit incididunt magna sit.\nLorem consequat labore sint laboris cupidatat. Nostrud duis do minim ea proident culpa minim occaecat et officia. Do incididunt magna voluptate magna sint cupidatat incididunt anim officia dolore pariatur et adipisicing. Id quis adipisicing ullamco. Anim eu veniam do adipisicing nisi labore Lorem laboris nisi dolor deserunt et id. Ipsum labore ut officia Lorem velit. Consequat sint pariatur nisi eiusmod pariatur proident cupidatat velit et incididunt do excepteur. Qui adipisicing aliqua nulla anim et sint enim occaecat tempor consequat.",
      "sessions": [
        {
          "id": 83803,
          "name": "Empathy Is Your Secret Weapon"
        }
      ],
      "name": "Elaine Harrison"
    },
    {
      "id": "3a07e485-97d1-4aa3-9027-08c26bb0c2a1",
      "bio": "Ea pariatur non ad veniam sunt sit. Irure commodo tempor do incididunt aute amet occaecat occaecat laborum. Adipisicing labore culpa laboris sint aliquip est mollit ut. Lorem exercitation quis cillum exercitation labore duis. Amet ad est ea eiusmod consequat ex velit esse mollit excepteur qui.",
      "sessions": [
        {
          "id": 132201,
          "name": "The Value of Working in Teams: Tinkertoy Edition"
        }
      ],
      "name": "Sherri Bishop"
    },
    {
      "id": "c3e49384-fa68-4710-8166-049a8b775a1e",
      "bio": "Nisi officia est exercitation sunt culpa pariatur cupidatat et Lorem velit officia velit duis incididunt. Dolore laborum occaecat esse sint Lorem voluptate non et quis qui pariatur in velit. Ex in eiusmod qui. Anim aliquip voluptate ut magna esse id. Nostrud cupidatat veniam ad irure duis quis Lorem occaecat. Cillum laboris enim duis consectetur amet ad tempor nostrud cillum ea excepteur consequat. Sit aute enim deserunt ea anim velit qui eu id veniam dolor reprehenderit labore in.",
      "sessions": [
        {
          "id": 85633,
          "name": "To 2FA or not to 2FA? Let's answer this question"
        }
      ],
      "name": "Janice Cook"
    },
    {
      "id": "424f7166-a882-473f-b05e-15aed7f9ff86",
      "bio": "Laboris nulla commodo elit duis minim nisi nostrud incididunt eiusmod laborum dolore tempor voluptate magna. Aliquip cillum nostrud aute velit aliquip ex minim esse fugiat reprehenderit veniam veniam. Laborum ipsum duis irure sit elit dolor nulla aliquip ipsum qui ut. Tempor ex velit sint dolor nostrud tempor irure proident magna nisi minim ut id laborum.\nEu ea ex irure labore Lorem elit incididunt aute tempor minim elit fugiat. Cillum adipisicing duis amet excepteur est enim officia culpa occaecat fugiat. Proident id amet minim sunt nisi minim id irure eu dolore velit laborum nulla enim. Nulla veniam cupidatat aute quis veniam irure mollit duis esse fugiat elit sint irure voluptate proident. Exercitation irure ullamco sint eu nisi tempor amet irure dolor. Tempor laboris duis nostrud dolore consequat labore elit irure nostrud.",
      "sessions": [
        {
          "id": 80991,
          "name": "React from Scratch"
        },
        {
          "id": 83052,
          "name": "Building Accessible Web Apps"
        }
      ],
      "name": "Tracy Peterson"
    },
    {
      "id": "e0595fcc-6be7-49c3-aeec-ce1fd13cd7f2",
      "bio": "Fugiat magna pariatur amet laboris nulla excepteur. Qui reprehenderit dolore non ex mollit pariatur consectetur irure cillum duis adipisicing. Sunt Lorem ad occaecat eu labore. Laboris velit consequat laborum ut pariatur laboris esse adipisicing tempor anim laborum anim sint. Ut ut occaecat excepteur consequat irure ex et aliqua qui incididunt labore in aliquip. Aliquip labore ad enim veniam adipisicing enim sunt esse cupidatat eiusmod sunt ipsum esse magna.",
      "sessions": [
        {
          "id": 80826,
          "name": "Progressive Web Apps with Angular"
        }
      ],
      "name": "Rylan Carroll"
    },
    {
      "id": "e9c40ccc-1ffd-44f5-90c2-9d69ada76073",
      "bio": "Esse veniam aliqua officia commodo eu incididunt dolore est. Et in reprehenderit et veniam ex proident consectetur ipsum eiusmod. Et quis ipsum est laborum laborum amet anim anim consectetur voluptate culpa deserunt amet duis. Consectetur consequat reprehenderit ea non do ea velit nulla aliqua dolore occaecat magna. Irure proident adipisicing irure do sunt elit tempor eiusmod dolore qui minim culpa. Ea cupidatat consequat est cillum magna sunt ut anim duis esse consectetur dolore.\nConsectetur sunt exercitation cupidatat culpa consectetur ut eiusmod fugiat exercitation ullamco nulla. Enim duis ad amet quis laborum nostrud anim velit consequat commodo commodo laborum. Sit labore commodo laboris ipsum elit pariatur veniam eu exercitation culpa sunt pariatur et exercitation. Officia exercitation occaecat occaecat esse veniam aute nisi sit mollit ipsum. Enim duis tempor amet amet nostrud aliquip enim pariatur qui cupidatat do. Nulla consequat officia ex aliqua sit irure proident tempor et enim adipisicing anim irure. Mollit consectetur amet culpa voluptate aliqua adipisicing nisi cillum labore. Aliquip mollit nostrud commodo laboris esse.",
      "sessions": [
        {
          "id": 85324,
          "name": "Growing Bamboo Spec"
        }
      ],
      "name": "Benjamin Cox"
    },
    {
      "id": "42c43411-422b-455a-8772-3e638e4deb35",
      "bio": "Commodo consequat nulla mollit eiusmod culpa dolore pariatur occaecat irure ullamco deserunt amet quis. Consectetur labore duis non qui sunt Lorem sit eu culpa labore qui voluptate aliquip incididunt. Non consectetur ad officia aliqua elit ex pariatur non nostrud cillum aliqua. Deserunt dolore occaecat esse labore ad et enim.\nDolore tempor culpa ex deserunt pariatur magna enim dolor reprehenderit amet reprehenderit irure laboris. Laboris ea in occaecat. Consectetur deserunt labore ex esse ut incididunt consequat sunt Lorem velit dolore cupidatat. Et cupidatat consequat incididunt aliqua culpa aliqua. Irure velit amet qui cupidatat Lorem anim anim adipisicing aute reprehenderit esse eu. Ullamco exercitation incididunt ullamco tempor minim esse. Eiusmod anim excepteur aute tempor officia anim eu labore excepteur sit irure quis.",
      "sessions": [
        {
          "id": 118208,
          "name": "End to End Azure DevOps"
        }
      ],
      "name": "Arthur Duncan"
    },
    {
      "id": "fa9a25d7-fdc1-4e8a-b4da-16a766d59127",
      "bio": "Voluptate dolore ut laborum dolor nulla velit pariatur do tempor qui. Cupidatat aliquip non officia incididunt esse elit dolore magna tempor minim. Nulla exercitation cupidatat veniam do laborum esse duis cillum excepteur ea nisi Lorem Lorem. Aliquip sunt irure esse labore duis elit magna velit. Nulla laborum velit sit qui excepteur. Sint aute fugiat laboris. Nisi ullamco esse et sit ea voluptate eiusmod labore ut. Deserunt deserunt cupidatat ut quis.",
      "sessions": [
        {
          "id": 85293,
          "name": "R for Data Science"
        }
      ],
      "name": "Milan Silva"
    },
    {
      "id": "3884cc4d-8364-4316-9b9a-e16561d87af3",
      "bio": "Incididunt pariatur laborum non amet do in sit aliqua eiusmod. Ex velit in cupidatat. Officia excepteur cupidatat quis veniam esse sunt deserunt commodo aliqua pariatur duis. Velit ullamco labore exercitation Lorem ullamco fugiat velit. Anim ut culpa tempor. Proident ad cillum adipisicing. Reprehenderit magna sit Lorem dolor ad deserunt dolor laborum id aliqua. Fugiat tempor aute tempor velit aute.\nIn excepteur officia ullamco occaecat et tempor. Consequat irure laborum sint consequat amet enim Lorem ipsum nisi dolor dolor laboris duis quis culpa. Ut in dolore adipisicing veniam occaecat tempor aliqua occaecat adipisicing incididunt. Laborum in ex esse ea sunt amet ad deserunt sit occaecat duis sit cupidatat dolore exercitation. Mollit nostrud deserunt dolore. Mollit anim sit aliquip amet cupidatat eiusmod. Lorem cupidatat ipsum incididunt eu eiusmod nisi in. Nostrud aliqua cillum et laboris laboris ut labore commodo sit amet ex non consectetur id eiusmod.",
      "sessions": [
        {
          "id": 85401,
          "name": "Node.js Crash Course"
        },
        {
          "id": 85400,
          "name": "Software and the Art of Delivery"
        }
      ],
      "name": "Sally Martinez"
    },
    {
      "id": "07a4abd7-18be-4eae-9bce-cb3cb3223229",
      "bio": "Velit qui cupidatat quis veniam. Qui cillum voluptate Lorem sit adipisicing reprehenderit et culpa. Ipsum laborum adipisicing Lorem amet minim ex occaecat magna ipsum irure reprehenderit velit sit. Fugiat in eiusmod cillum in ex non deserunt pariatur. Magna elit id cillum in nostrud consequat do veniam ullamco. Nisi tempor irure id non. Sit occaecat ipsum commodo in excepteur duis est est aute aute. Quis officia ipsum duis do tempor exercitation dolor proident qui velit nulla exercitation officia fugiat.\nConsectetur aliqua magna irure do voluptate tempor cillum. Aute ipsum fugiat ad adipisicing veniam sunt officia. Dolore velit commodo amet qui consequat non ipsum commodo sint cillum. Non est aute non mollit aute minim. Aute reprehenderit laboris sint fugiat quis non. Amet consectetur minim incididunt irure sit ex cupidatat eu excepteur non ullamco cillum. Mollit id sunt do eu quis ea quis duis culpa tempor non. Id velit ipsum est.",
      "sessions": [
        {
          "id": 85114,
          "name": "What Developers Need To Know About Blockchain"
        }
      ],
      "name": "Sylvia Ray"
    },
    {
      "id": "bfcdc009-a3ea-4b6c-be8f-a15ebe84b22f",
      "bio": "Incididunt enim deserunt laborum pariatur sunt. Qui sit occaecat cupidatat tempor consectetur. Eiusmod qui consequat cillum sit deserunt. Dolore esse nisi eu excepteur quis deserunt et nostrud quis dolore cupidatat pariatur ut ad. Elit qui nostrud qui cillum labore esse deserunt duis.",
      "sessions": [
        {
          "id": 85674,
          "name": "Product Ownership for the Rest of Us"
        }
      ],
      "name": "Lincoln Alexander"
    },
    {
      "id": "aab12620-8f08-4ee9-98c4-1ac299c21182",
      "bio": "Est dolore laboris velit deserunt deserunt. Tempor deserunt reprehenderit id duis consectetur cillum esse eiusmod est dolor. Sunt ut non enim quis laboris Lorem nulla nulla ad eu elit amet Lorem culpa. Ullamco minim non proident esse et excepteur consequat magna sit voluptate est in est labore ex. Deserunt elit ad ullamco dolor cupidatat. Id culpa laborum amet officia voluptate sint enim nisi. Ex excepteur mollit reprehenderit quis ea occaecat culpa aute nulla non amet incididunt esse veniam proident. Magna excepteur ea exercitation quis culpa.\nReprehenderit in aute et proident ullamco est. Culpa esse laboris Lorem sit nulla cillum eiusmod sit aliquip est proident Lorem. Voluptate proident in cupidatat nisi non pariatur mollit officia excepteur non exercitation excepteur nulla. In ullamco quis enim sit occaecat cillum proident laboris eu eiusmod dolore.",
      "sessions": [
        {
          "id": 85724,
          "name": "Back to the CompletableFuture: Concurrency in Action"
        },
        {
          "id": 85712,
          "name": "Remote Work as the Gateway to Freedom: Failures and Successes"
        }
      ],
      "name": "Donald Davis"
    },
    {
      "id": "3752adf8-2ff3-4490-a156-6d9bb1c33515",
      "bio": "Nulla elit Lorem duis laborum adipisicing minim minim voluptate aliquip. Laboris elit tempor qui eu ipsum duis ea duis pariatur dolore labore. Aliquip velit culpa ipsum reprehenderit occaecat nisi nisi enim officia culpa ea veniam. Ut officia occaecat officia ut eu voluptate fugiat. Quis magna commodo cupidatat ex commodo exercitation in. Excepteur magna amet Lorem tempor non nulla reprehenderit.\nQui ullamco irure esse voluptate. Deserunt eiusmod nisi consequat anim minim. Laborum officia ut Lorem veniam quis exercitation sint. Eiusmod eu tempor magna commodo duis irure.",
      "sessions": [
        {
          "id": 85070,
          "name": "Keyboards? Where we’re going, we don’t need keyboards."
        }
      ],
      "name": "Wisdom Bailey"
    },
    {
      "id": "6575979c-1c44-4f74-8fcd-38a76df2dc49",
      "bio": "Laborum occaecat quis id qui velit dolor deserunt sit velit. Ut aute in elit velit ipsum irure quis. Sint eu nulla elit irure adipisicing irure esse adipisicing mollit elit nostrud. Sint voluptate aliquip cupidatat deserunt consectetur pariatur ipsum dolor excepteur ea ipsum tempor ut dolor. Do sunt aute fugiat aliquip tempor. Sit sit tempor ad eiusmod ut consequat esse occaecat id.",
      "sessions": [
        {
          "id": 84980,
          "name": "Data Science with Python & Friends"
        }
      ],
      "name": "Delta Morgan"
    },
    {
      "id": "67d4621e-71f3-44ec-b9c9-b182e1cf278a",
      "bio": "Est cupidatat sint reprehenderit culpa magna mollit Lorem sit est. Officia qui in nostrud cupidatat esse velit labore mollit. Excepteur sunt culpa do aliqua exercitation esse reprehenderit. Proident elit amet incididunt minim eiusmod fugiat qui incididunt eiusmod nisi ut Lorem proident. Incididunt voluptate officia Lorem incididunt ullamco pariatur aute cupidatat. Officia labore quis pariatur id. Veniam excepteur qui aliqua nulla qui elit aliqua consectetur aliquip.",
      "sessions": [
        {
          "id": 85238,
          "name": "Hacking Your Car - Driving Towards a smarter future"
        }
      ],
      "name": "Egypt Hicks"
    },
    {
      "id": "1d7dcbfc-1de6-4228-8bd6-04f4ba1c4267",
      "bio": "Tempor ut adipisicing sit. Deserunt occaecat proident enim tempor est magna. Exercitation aute tempor laboris ea laborum ipsum aute. Anim fugiat cillum aliqua officia fugiat ullamco eiusmod veniam elit quis consequat consequat minim. Nostrud nulla nisi occaecat incididunt esse adipisicing commodo esse magna sit anim. Sit duis consectetur sint reprehenderit anim esse veniam. Ea minim commodo commodo dolore dolore qui sunt.",
      "sessions": [
        {
          "id": 85480,
          "name": "Ctrl-Alt-Del: Learning to Love Legacy Code"
        }
      ],
      "name": "Adrian Bryant"
    },
    {
      "id": "c3736706-c726-4e38-b7aa-85b47e5e8c2d",
      "bio": "Sit est pariatur pariatur deserunt reprehenderit et aute exercitation. Aliqua laborum pariatur irure est deserunt eu voluptate reprehenderit eu sit. Id esse ut reprehenderit fugiat reprehenderit Lorem duis sint excepteur voluptate proident minim. Sint non cupidatat sit deserunt excepteur laboris occaecat sit. Laboris pariatur tempor velit sint do excepteur incididunt do dolore aliqua ad enim consequat. Aliqua minim velit veniam dolor. Sit amet deserunt duis nulla sint voluptate labore irure quis tempor proident laboris.\nUt anim dolor amet officia nisi aute velit occaecat. Laboris ea exercitation eu occaecat mollit officia officia eu deserunt occaecat labore. Do fugiat veniam magna ut elit magna nisi ullamco commodo. Ut irure nisi culpa in sunt nulla sit sint officia dolor commodo ullamco aliqua. Mollit reprehenderit ipsum qui sint dolor cillum. Duis laboris adipisicing ad veniam irure enim tempor ex occaecat excepteur cillum. Dolore fugiat anim ullamco ea nisi officia aliquip mollit et. Ex reprehenderit laborum ea ipsum incididunt ut cupidatat cillum ullamco.",
      "sessions": [
        {
          "id": 84929,
          "name": "Web and Mobile shared UI component libraries, a pipe-dream or a reality?"
        },
        {
          "id": 84930,
          "name": "Matching Webapp deployment velocity in React Native"
        }
      ],
      "name": "Clinton Miles"
    },
    {
      "id": "c663514a-b009-4433-9cb5-dece8fd5163e",
      "bio": "Deserunt eu et reprehenderit elit qui irure cillum dolor ullamco ea tempor pariatur consectetur. Dolor ipsum laborum labore dolore dolore cupidatat. Occaecat amet laborum incididunt cupidatat dolore excepteur sint veniam ea amet quis ea nisi deserunt reprehenderit. Aliqua nulla ipsum in quis nulla excepteur excepteur excepteur velit velit magna non esse consectetur. Officia nisi laborum et ex reprehenderit fugiat excepteur ullamco. Laborum consectetur pariatur cupidatat dolor. Nulla qui aliqua amet reprehenderit laboris occaecat est dolor.\nUllamco in consectetur officia labore ullamco sint est dolor velit eiusmod mollit est voluptate in. Tempor laborum tempor dolor eiusmod dolor esse magna. Nostrud dolor dolor anim sint aute ut in eu labore velit anim occaecat cupidatat occaecat. Laborum ad exercitation culpa in fugiat fugiat nulla pariatur reprehenderit ipsum officia adipisicing. Sunt elit pariatur in do aute. Qui sunt et velit culpa commodo aute. Exercitation est sint eu dolor nostrud exercitation.",
      "sessions": [
        {
          "id": 78267,
          "name": "Building a distributed platform"
        }
      ],
      "name": "Eleanor Perez"
    },
    {
      "id": "d06ac681-c405-491a-8f42-fced6fc602a9",
      "bio": "Veniam consectetur do commodo ea veniam labore culpa enim deserunt laborum. Enim cupidatat elit commodo occaecat ea magna velit sit reprehenderit. Ut ut est occaecat exercitation id sint anim ex eu proident aliqua elit. Ex commodo reprehenderit est.",
      "sessions": [
        {
          "id": 80694,
          "name": "Service Mesh Magic?"
        }
      ],
      "name": "Moriah Burke"
    },
    {
      "id": "157903b1-faf8-4c64-b984-38c735ef3dec",
      "bio": "Velit incididunt consectetur voluptate quis deserunt et velit nostrud ex qui tempor et deserunt. Veniam enim laboris ut eiusmod ipsum anim enim nostrud dolor aliqua. Quis amet ea aute exercitation ipsum esse pariatur ullamco veniam velit do nisi sint commodo. Magna cillum fugiat sunt aliquip enim do velit minim consequat exercitation elit est sunt sint. Aliqua eiusmod minim ad fugiat proident culpa incididunt velit sint nulla pariatur. Magna duis et sit esse sit voluptate sint est in dolor exercitation.\nCommodo veniam veniam esse nostrud. Anim cillum ipsum veniam consequat. Deserunt ut minim tempor cupidatat irure deserunt qui deserunt quis proident minim. Adipisicing elit reprehenderit incididunt excepteur qui exercitation ipsum sint eiusmod. Laboris sunt cillum consequat magna aliqua fugiat voluptate magna eu proident. Ea adipisicing consectetur pariatur officia anim excepteur sit irure anim id id culpa cupidatat. Irure esse do laboris nostrud consequat. Ea id nulla dolor consequat elit non.",
      "sessions": [
        {
          "id": 84525,
          "name": "The Life-Changing Magic of Tidying Your Dev Team"
        }
      ],
      "name": "Kent Silva"
    },
    {
      "id": "b4c506ac-9757-4ac6-8b7c-3d6696b113e4",
      "bio": "Officia eu veniam in ipsum irure nulla. Commodo Lorem veniam dolore quis mollit id nulla. Consectetur ullamco culpa enim ut nisi aliqua esse et incididunt dolore incididunt culpa ut reprehenderit. Labore non ea nisi ut commodo. Consequat exercitation reprehenderit ut commodo amet labore laboris eiusmod ex mollit quis sit qui.",
      "sessions": [
        {
          "id": 81893,
          "name": "Deep Learning in the world of little ponies"
        }
      ],
      "name": "Ashley Fleming"
    },
    {
      "id": "8dffae42-4a07-4e05-8352-15b141753bdc",
      "bio": "Aliqua magna velit Lorem et labore commodo dolor ullamco magna nostrud id fugiat quis nulla. Officia consequat tempor esse. Amet mollit fugiat nisi. Commodo irure excepteur eu labore cillum elit sunt velit amet tempor deserunt adipisicing ex consectetur. Cupidatat deserunt aliqua enim sit consectetur ut esse. Ea sit labore elit magna ad enim ipsum in id officia velit pariatur. Amet veniam irure in nostrud nulla anim duis ad nulla cillum.\nSit eu ea officia ipsum consequat officia pariatur aliquip. Veniam nisi adipisicing ipsum proident ipsum. Ad enim culpa est nisi qui est nostrud qui nostrud. Magna ullamco consequat et ipsum ea enim. Aute sunt nostrud non ex sit sint laborum consequat id ipsum est exercitation irure voluptate. Amet voluptate occaecat sint. Qui ullamco exercitation sunt magna in ex nulla in elit. Est cillum sunt ullamco consectetur cupidatat aliquip esse aliquip adipisicing labore eu eiusmod aute.",
      "sessions": [
        {
          "id": 83401,
          "name": "A Piece of Cake - C# powered cross platform build automation"
        }
      ],
      "name": "Tracy Wallace"
    },
    {
      "id": "8f9262db-02d6-4322-93e3-23f309281afa",
      "bio": "Aliquip consectetur culpa commodo. Sit laboris dolore voluptate sit exercitation. Nostrud occaecat est incididunt amet. Laboris in deserunt elit nisi irure sit enim laborum. Laborum cillum irure nostrud. Enim enim esse dolore duis nisi commodo laboris sit tempor elit duis culpa qui. Proident adipisicing est pariatur aliquip enim fugiat consequat adipisicing ea eu Lorem. Do aliqua mollit do ad Lorem ipsum ea cillum labore culpa laboris consequat amet excepteur.",
      "sessions": [
        {
          "id": 80372,
          "name": "Building a mobile enterprise application with Xamarin.Forms, Docker, MVVM and .NET Core"
        }
      ],
      "name": "Sean Newman"
    },
    {
      "id": "520bf4ca-b2d3-47c3-8475-c25bb2b257f7",
      "bio": "Reprehenderit sint duis veniam est. Nisi cillum sit pariatur commodo et elit incididunt ipsum dolore nostrud nulla. Ullamco consectetur eiusmod ut velit officia exercitation exercitation ut dolore labore proident ea voluptate est deserunt. Enim labore magna veniam ex laboris minim duis minim nostrud voluptate occaecat deserunt veniam sit sit.",
      "sessions": [
        {
          "id": 77822,
          "name": "Deep Learning like a Viking: Building Convolutional Neural Networks with Keras"
        },
        {
          "id": 77823,
          "name": "An Introduction to WebAssembly"
        }
      ],
      "name": "Eddie Jones"
    },
    {
      "id": "cc4156db-2db1-47de-9578-6c9134ee6eee",
      "bio": "Id reprehenderit pariatur sint enim eu incididunt. Duis ipsum officia proident sint cupidatat ut fugiat in pariatur excepteur. Anim esse ea reprehenderit ex do amet culpa dolor. Esse nulla aute sint duis culpa nostrud non sint dolor eiusmod amet nisi ea. Excepteur occaecat non amet. Fugiat magna duis commodo reprehenderit incididunt duis voluptate esse mollit minim aliqua incididunt occaecat quis. Dolore nisi in nulla. Sit quis minim occaecat ea voluptate est consectetur adipisicing anim sunt qui magna do.\nUt in ea irure. Eiusmod ea tempor deserunt tempor elit ad aute irure Lorem magna sint. Pariatur officia ex eu anim nostrud occaecat laboris non velit ipsum aliqua consequat incididunt sit est. Enim excepteur anim sit tempor deserunt esse aliquip ex officia mollit minim laboris. Et eiusmod minim reprehenderit laboris ipsum non dolor sunt cillum est ut incididunt cupidatat amet enim.",
      "sessions": [
        {
          "id": 79528,
          "name": "Affective Computing - What is it and why should I care?"
        }
      ],
      "name": "Jordan Tucker"
    },
    {
      "id": "497f9bfb-7e28-4773-81e3-e853ca09ccde",
      "bio": "Non mollit labore ipsum mollit voluptate ullamco laboris veniam in aliqua non. Et aliqua eiusmod sunt ullamco exercitation laboris sint deserunt culpa tempor. Tempor et Lorem adipisicing. Reprehenderit amet cillum consequat.",
      "sessions": [
        {
          "id": 78271,
          "name": "Build software like a bag of marbles, not a castle of LEGO®"
        }
      ],
      "name": "Ann Jennings"
    },
    {
      "id": "5a2cb73d-6068-48c3-bf16-27473c91d8a0",
      "bio": "Laboris non pariatur cillum deserunt consectetur deserunt eu incididunt esse est. Commodo cillum Lorem ea mollit do. Fugiat fugiat sit amet sit. Voluptate amet dolor eu non. Ad eiusmod id ut id in qui minim eiusmod voluptate do. Eiusmod irure officia magna qui non excepteur mollit nostrud dolor elit deserunt aliqua laborum nostrud nisi. Eiusmod cupidatat deserunt fugiat est ea mollit adipisicing eiusmod mollit tempor consectetur pariatur labore exercitation excepteur. Incididunt veniam reprehenderit officia est.",
      "sessions": [
        {
          "id": 81227,
          "name": "Saving 60 Million Dollars: Steps Towards GDPR Compliance"
        }
      ],
      "name": "Hilda Lewis"
    },
    {
      "id": "d0405bbe-df7a-4190-8bbf-01ea2f125408",
      "bio": "Laboris ut tempor adipisicing eiusmod in quis anim veniam. Ad amet nisi minim exercitation cupidatat veniam labore voluptate minim cupidatat aliqua. Et adipisicing proident ipsum cupidatat amet qui irure in fugiat irure dolor est ullamco laborum anim. Ex ex consectetur occaecat officia proident mollit ad est non veniam tempor officia elit ipsum fugiat. Sit pariatur ex aliqua consequat fugiat ea ullamco id occaecat magna.\nDuis ipsum quis veniam eu velit elit Lorem veniam quis non ex. Consectetur consequat adipisicing duis dolore culpa et tempor amet non. Et ea eu nostrud quis minim ad nulla amet dolore. Occaecat consequat ullamco ea excepteur exercitation Lorem Lorem aliqua ex eu sint velit. Ad in ea ipsum aute culpa ullamco ipsum nisi Lorem Lorem reprehenderit non. Et commodo proident excepteur Lorem. Cillum ipsum amet sit tempor incididunt veniam occaecat cupidatat do. Ea elit incididunt sit magna Lorem occaecat commodo ut proident qui.",
      "sessions": [
        {
          "id": 85312,
          "name": "Electronics for Programmers"
        }
      ],
      "name": "Beatrice Medina"
    },
    {
      "id": "da1a1990-71d2-45dd-a213-c04430b64d87",
      "bio": "Sit Lorem voluptate nisi enim Lorem. Ut voluptate esse dolor irure culpa aliqua eu duis officia eu. Laborum est ea commodo in eiusmod mollit irure nisi culpa do pariatur magna officia aute. Sint aliqua occaecat anim ex veniam eu labore laboris eiusmod laborum. Fugiat nulla irure amet officia eiusmod aute culpa pariatur elit culpa cillum ea voluptate.\nCulpa tempor incididunt mollit. Reprehenderit labore ullamco elit sit aliqua ullamco excepteur. Esse ipsum Lorem quis sint elit. Occaecat qui est nulla elit incididunt quis aute occaecat. Exercitation voluptate amet elit occaecat veniam ex qui irure minim nulla ad eu amet nisi qui.",
      "sessions": [
        {
          "id": 85295,
          "name": "Demystifying User Management for Voice Apps"
        }
      ],
      "name": "Colleen Douglas"
    },
    {
      "id": "5403c3f5-a57b-4fa9-ba49-de42cef55be4",
      "bio": "Amet et esse do duis aliquip commodo dolor qui occaecat in consectetur ex occaecat cupidatat amet. Quis aute pariatur ipsum minim ut dolor nostrud in aute laborum in ea culpa. Ipsum mollit est eu id labore do. Sunt magna veniam excepteur irure do magna. Lorem voluptate dolore consequat aute reprehenderit minim ex labore ut. Occaecat velit excepteur sint minim labore commodo nostrud aliquip ullamco. Magna consequat duis tempor Lorem dolor sint do nulla duis duis magna.\nOfficia pariatur quis cupidatat minim nostrud in irure aliquip. Mollit reprehenderit sunt anim. Dolor enim ad aute deserunt laborum consectetur. Ex dolore exercitation laboris in voluptate cillum occaecat pariatur ut.",
      "sessions": [
        {
          "id": 84700,
          "name": "How to Participate in the Future of Java"
        }
      ],
      "name": "Rick Brown"
    },
    {
      "id": "3b4b4bf9-547b-4961-a49e-f7028b0390cd",
      "bio": "Reprehenderit labore aute amet amet nulla laborum qui elit in nisi excepteur non Lorem non officia. Eiusmod culpa nostrud sunt occaecat consequat mollit voluptate elit deserunt tempor sunt ex laborum adipisicing. Eu non ullamco culpa sit. Velit pariatur minim est velit nostrud nisi consectetur adipisicing tempor labore ad veniam occaecat quis veniam.\nAliqua consectetur dolor aliqua id excepteur do. Labore voluptate ipsum reprehenderit excepteur est velit eiusmod. Aute tempor nostrud cillum culpa magna ad exercitation. Irure laboris labore quis officia. Nisi velit pariatur nostrud irure commodo. Esse voluptate deserunt amet nostrud. Est commodo minim veniam et reprehenderit tempor anim dolore excepteur pariatur fugiat.",
      "sessions": [
        {
          "id": 80342,
          "name": "Leadership Skills for the Non-Manager"
        }
      ],
      "name": "Roland Terry"
    },
    {
      "id": "2e41996e-0ac7-42a6-a8d6-b8fc6a9a410f",
      "bio": "Aliquip cupidatat deserunt occaecat sit proident duis proident nostrud ad voluptate minim in amet veniam anim. Fugiat nulla nostrud consectetur. Commodo est eiusmod pariatur anim quis amet. Voluptate proident voluptate mollit pariatur non magna mollit mollit culpa quis deserunt. Adipisicing exercitation sunt non velit Lorem nostrud pariatur laborum laboris. Fugiat id ad ullamco.\nQui adipisicing eu quis esse fugiat in ipsum aute esse cillum officia non proident officia laborum. Ullamco aliquip id reprehenderit cillum culpa velit occaecat voluptate Lorem velit fugiat cillum minim velit. Consequat aliqua esse sit nostrud incididunt velit consectetur enim duis. Culpa aliquip pariatur do ullamco esse eu dolore ex eiusmod aliqua anim pariatur veniam cupidatat. Nulla non ipsum magna pariatur tempor veniam aute. Laboris ad veniam velit reprehenderit. Mollit aliqua dolor dolore duis cupidatat velit nostrud labore occaecat commodo.",
      "sessions": [
        {
          "id": 79879,
          "name": "Examples of Machine Learning in three languages"
        },
        {
          "id": 79878,
          "name": "Real life use cases for Machine Learning"
        }
      ],
      "name": "Angela Castillo"
    },
    {
      "id": "36a25c2a-4204-42f0-9ba8-d7b9c6f67226",
      "bio": "Deserunt sunt tempor cupidatat Lorem tempor. Occaecat sint ad eu amet veniam ex do velit ipsum incididunt reprehenderit cillum quis nostrud ullamco. Lorem elit officia est sunt est sunt incididunt nostrud laboris officia aute ea consequat aute aute. Aute qui ad ullamco aliquip excepteur tempor eu amet et est dolore cillum.\nSunt aliqua laboris irure excepteur ex et. Exercitation id est culpa irure ea proident labore magna sit. Enim non cillum enim nostrud adipisicing laboris ea do incididunt pariatur ex laborum qui. Quis aliqua consequat proident mollit officia. Id dolore aliqua nulla. Occaecat nostrud pariatur culpa ea sint laborum deserunt veniam quis Lorem Lorem proident pariatur Lorem ullamco. Aute fugiat cillum enim amet. Tempor officia id enim est excepteur dolore culpa et laboris velit do ad cillum ad.",
      "sessions": [
        {
          "id": 79874,
          "name": "Build your own A.I. powered robot (Reloaded)"
        },
        {
          "id": 83380,
          "name": "Getting started with Azure Machine Learning services"
        }
      ],
      "name": "Bowie Graves"
    },
    {
      "id": "3c348111-df90-48f0-b58b-f6b1321d9602",
      "bio": "Lorem amet incididunt esse elit est aliquip sunt mollit do. Fugiat non labore enim culpa consectetur est laboris ex. Ipsum ad reprehenderit irure reprehenderit sint aliqua ut est anim qui id nisi eu mollit consequat. Quis duis laboris dolor nisi magna quis nulla incididunt nostrud nulla quis labore dolor fugiat nisi. Pariatur veniam aliqua nulla sint quis consectetur ex in proident irure eu sunt. Proident adipisicing veniam eiusmod sint dolore ipsum enim non nostrud.",
      "sessions": [
        {
          "id": 83933,
          "name": "Digging In: Getting Familiar With The Code To Be A Better Tester"
        },
        {
          "id": 136957,
          "name": "Super Sleuth Testers: Unlocking the Power of Browser Developer Tools"
        }
      ],
      "name": "Tina Graves"
    },
    {
      "id": "5d75dcd9-5de6-48f4-a6fc-c980fc7c6cba",
      "bio": "Commodo laborum velit ut officia non ad officia. Pariatur deserunt incididunt in. Dolore reprehenderit aute magna ipsum pariatur qui incididunt et aliqua laborum eiusmod tempor. Aliquip in cillum occaecat nisi magna voluptate exercitation. Veniam consectetur nostrud occaecat sint aute dolor aliquip eiusmod laboris sunt nulla.\nOfficia cupidatat aliquip tempor commodo ullamco ipsum sunt qui exercitation proident dolor cupidatat ea est. Enim cillum proident culpa incididunt anim qui sit excepteur magna laborum voluptate. Nulla ex proident commodo non nulla nulla voluptate. Dolor deserunt laborum deserunt quis anim consequat eu ex elit. Laborum dolor sunt officia deserunt ex cupidatat ex culpa do. Quis et sunt pariatur ex incididunt. Anim ipsum cillum cupidatat. Mollit aliquip minim amet anim Lorem culpa qui nisi duis elit reprehenderit id veniam.",
      "sessions": [
        {
          "id": 82572,
          "name": "Practical DDD: Bounded Contexts + Events => Microservices"
        }
      ],
      "name": "Caelan Barnett"
    },
    {
      "id": "1ae7a4a9-3668-4703-840c-05b4cf857d7d",
      "bio": "Nulla enim amet eu consectetur et aliquip adipisicing cupidatat deserunt proident est occaecat. Labore anim minim amet. Eu est aliquip id nostrud in enim elit. Proident sunt magna ad mollit irure ipsum est consequat est esse non. Ad commodo quis ut ea pariatur nostrud cupidatat minim excepteur occaecat do proident. Ullamco duis proident ut eiusmod duis proident consectetur aute enim. Nisi magna ea laborum quis in cupidatat ipsum duis et commodo officia ea minim quis dolor.",
      "sessions": [
        {
          "id": 85394,
          "name": "Getting more out of TypeScript"
        }
      ],
      "name": "Caelan Fleming"
    },
    {
      "id": "f90f22c5-d251-42a5-afe8-af13d5b2aea8",
      "bio": "Qui pariatur anim eu fugiat dolore laborum anim ullamco magna ipsum ipsum ea ullamco occaecat. Fugiat et veniam ipsum ipsum. Qui excepteur velit dolor amet sunt non sit ad mollit aliquip voluptate commodo ullamco irure laborum. Magna est duis mollit adipisicing aliquip officia ea laborum. Adipisicing cupidatat amet excepteur qui incididunt voluptate reprehenderit ea minim excepteur aliquip pariatur officia tempor amet. Cupidatat eu adipisicing nostrud commodo ea.\nCulpa minim elit Lorem aliqua veniam cupidatat culpa duis pariatur. Aute qui velit irure esse enim excepteur ex cillum elit pariatur. Ea nostrud reprehenderit aliqua consequat esse et minim deserunt aliquip Lorem mollit. Sunt eiusmod exercitation enim cupidatat adipisicing sit. Dolore eu in aliqua incididunt minim Lorem minim consequat amet Lorem laborum commodo duis voluptate. Elit officia adipisicing elit culpa ad esse eiusmod quis. Ut amet consectetur veniam enim.",
      "sessions": [
        {
          "id": 85097,
          "name": "So, You Want to Work from Home? – How to Live the Dream While Staying Productive and Keeping your Sa"
        }
      ],
      "name": "Amari Nelson"
    },
    {
      "id": "82242efa-dc48-4c4b-8e26-6b93bbe5623a",
      "bio": "Excepteur do labore non dolor aute quis est magna cillum qui elit est labore. Fugiat quis excepteur ut consequat incididunt duis qui id qui nisi nostrud fugiat excepteur. Est sit sunt Lorem reprehenderit excepteur qui aliqua ullamco. Ipsum id sunt et consectetur laborum minim ex exercitation consectetur quis ex. Nostrud ut ut ad ad et officia sit ad tempor. Ullamco irure fugiat nostrud et fugiat dolore.\nMagna duis aliqua in elit pariatur aliquip minim cillum sint deserunt in nisi dolor. Irure aute excepteur adipisicing non eu eiusmod consequat duis Lorem enim occaecat laborum sunt pariatur. Culpa non proident adipisicing officia minim aute. Occaecat qui elit nostrud pariatur duis in consequat deserunt nisi. Magna consequat sint ut culpa qui enim duis tempor aliqua sunt. Officia incididunt dolor in ex magna consectetur eiusmod labore est fugiat voluptate nulla.",
      "sessions": [
        {
          "id": 80621,
          "name": "Cloud Networking - What's Underneath?"
        }
      ],
      "name": "Sally Howell"
    },
    {
      "id": "01b15b1c-44e4-4121-b057-ae7eb9c83934",
      "bio": "Eiusmod sit consectetur labore ea cillum minim esse sunt do qui. Dolore reprehenderit adipisicing exercitation laborum elit laborum adipisicing nostrud aliqua laboris sit et laborum nisi commodo. Excepteur do laborum pariatur. Occaecat dolor eiusmod exercitation dolor elit enim veniam voluptate ad ipsum velit ut magna aute. Occaecat esse exercitation reprehenderit aliquip.\nDeserunt sit commodo ullamco. Eu laboris non enim cillum consectetur ipsum. Quis exercitation pariatur ullamco cupidatat ex sint occaecat fugiat dolore ad eu. Consequat anim aute officia cillum aute aute minim ipsum sunt incididunt reprehenderit ex in aliqua. Id exercitation pariatur id in amet est et proident fugiat duis adipisicing deserunt. Reprehenderit minim do ut culpa eiusmod nostrud in.",
      "sessions": [
        {
          "id": 81852,
          "name": "CI/CD - More Than an Acronym, It's a culture shift"
        },
        {
          "id": 81853,
          "name": "Defense Against the JavaScript Dark Arts"
        }
      ],
      "name": "Rafael Moore"
    },
    {
      "id": "30891879-811f-4305-a3a8-301ea031a832",
      "bio": "Labore excepteur aliqua excepteur magna officia consectetur aliquip. Eu aliquip aliqua cupidatat ipsum dolore nostrud sit sunt elit dolor ut labore aliquip ipsum. Non ex officia aliquip non sit aliqua id in. Fugiat anim amet adipisicing dolor commodo culpa elit pariatur ad esse irure esse dolore. Incididunt duis ex ut minim excepteur ullamco qui officia consectetur. Id non nulla aliqua. Veniam cupidatat velit aliqua aliqua dolore aliquip.",
      "sessions": [
        {
          "id": 77761,
          "name": "Learn You an Infrastructure as Code for a great good!"
        }
      ],
      "name": "Jimmy Morgan"
    },
    {
      "id": "5698811a-4c31-4537-970d-e427009e0cca",
      "bio": "Veniam exercitation ea dolore minim aliqua ad aliquip id. Sit sit commodo esse exercitation pariatur adipisicing aliqua fugiat labore dolore. Magna commodo do dolor ipsum commodo. Occaecat magna irure officia non pariatur et reprehenderit deserunt magna ad. Est aliqua occaecat ex ea sunt sunt in tempor exercitation exercitation veniam consectetur qui fugiat quis.",
      "sessions": [
        {
          "id": 79285,
          "name": "From localhost to production: Managing your code with Azure DevOps"
        }
      ],
      "name": "Tobin Owens"
    },
    {
      "id": "2fa76004-1cbe-4296-9ab5-76d3d7e6f01c",
      "bio": "Amet velit officia velit deserunt do occaecat cillum dolor laborum. Occaecat aute laborum adipisicing mollit magna dolor aliqua consequat ad excepteur nostrud. Aliquip duis deserunt ad dolore duis velit cillum sit ullamco ullamco est. Laborum Lorem cillum minim eiusmod proident exercitation voluptate deserunt culpa amet non. Ut consectetur amet consectetur ea nisi Lorem in in culpa. In et ad ullamco nostrud adipisicing laboris laboris consequat tempor exercitation laboris aliquip eu velit. Exercitation aute ullamco labore elit aliquip amet excepteur tempor cillum irure ullamco enim duis. Esse quis ipsum veniam qui enim fugiat.\nDolore irure cupidatat elit elit aliqua. Excepteur eu proident elit sit aliqua ea eu ullamco sit nostrud fugiat dolore. Qui labore ex ullamco esse velit voluptate voluptate enim ad do enim pariatur elit occaecat. Magna est dolor occaecat deserunt occaecat velit dolor. Anim sit ea cupidatat aute quis est anim ea laborum eiusmod consectetur excepteur deserunt velit sint. Proident officia elit fugiat labore occaecat cillum. Non cupidatat dolore dolor esse veniam eu sunt ex.",
      "sessions": [
        {
          "id": 85330,
          "name": "ModernJava : Do you want to know-it-all?"
        }
      ],
      "name": "Brooklyn Murray"
    },
    {
      "id": "d8aa2b78-7d7c-4f54-a3bb-cd3c5776c6f8",
      "bio": "Ea ea non aliqua duis cillum non sit. Duis est fugiat consectetur esse eu anim aliquip proident laboris. Occaecat fugiat ad qui mollit dolore consectetur consequat culpa dolor amet sint tempor elit deserunt quis. Lorem duis do sunt in labore Lorem amet Lorem incididunt anim. Do officia et laborum.",
      "sessions": [
        {
          "id": 78974,
          "name": "A Roadmap to Enterprise Quality"
        }
      ],
      "name": "Brenda Garrett"
    },
    {
      "id": "0cad75da-11c1-4524-a9de-8382783f8745",
      "bio": "Laborum occaecat consequat pariatur consequat. Occaecat amet quis pariatur enim amet fugiat exercitation consequat incididunt occaecat aliquip cupidatat laboris aliquip. Ad excepteur aute ea cillum id ullamco. Enim velit et magna ea sint Lorem do quis magna adipisicing non Lorem. Aliquip sit id cupidatat ad esse deserunt tempor ex enim dolore.\nElit minim ullamco cupidatat anim aute. Dolore ullamco ex culpa. Minim dolor aliquip sunt nisi ullamco aute deserunt incididunt aliquip enim do ad consectetur ad aliqua. Qui ullamco adipisicing eiusmod sunt eiusmod consectetur est exercitation magna ex culpa magna. Consequat non consectetur culpa sunt ut ullamco non elit.",
      "sessions": [
        {
          "id": 84887,
          "name": "Don't call it a Post-Mortem unless somebody died - Continuous Learning for Continuous Improvement"
        }
      ],
      "name": "Quinn Cruz"
    },
    {
      "id": "ebf3ea5e-8d7b-45f4-bc39-559f3fc28e9d",
      "bio": "Sunt consequat laborum deserunt sint enim nisi exercitation anim ut ex ex. Et do aute veniam. Quis nulla ut proident exercitation nulla non sit sint do. Qui do officia eiusmod velit velit exercitation anim adipisicing minim proident quis anim. Adipisicing nulla do anim in fugiat laborum reprehenderit consequat occaecat tempor sunt laborum laboris ut.",
      "sessions": [
        {
          "id": 78312,
          "name": "Weaving Tapestries of Code"
        }
      ],
      "name": "Phyllis Long"
    },
    {
      "id": "e8154769-ac25-4c42-890f-6ccd70e2ec79",
      "bio": "Cupidatat aliqua quis incididunt do eu officia aute fugiat ipsum mollit ut excepteur. Tempor pariatur cupidatat aute sit. Esse excepteur nulla culpa velit laborum. Dolore in do est duis magna qui veniam occaecat.\nQuis mollit ea sunt anim sit minim. Cillum officia velit deserunt voluptate sint laboris nostrud nisi proident id enim pariatur aute. Cupidatat consequat proident nulla excepteur magna aute adipisicing labore id. Id magna eiusmod do labore ad consequat laboris non laboris sint Lorem nulla sunt dolor non.",
      "sessions": [
        {
          "id": 84652,
          "name": "Graph Algorithms: Predict Real-World Behavior"
        }
      ],
      "name": "Allan Knight"
    },
    {
      "id": "e5b9e6c6-1477-4b19-8347-06683a7417de",
      "bio": "Non ad nisi magna ut dolor eu tempor exercitation ea consequat. Aute proident duis reprehenderit fugiat quis qui culpa do. Duis quis pariatur eiusmod Lorem sunt dolore eiusmod ex laborum deserunt ullamco commodo in. Ad est non fugiat laborum laborum esse dolore cillum quis. Exercitation fugiat sit occaecat irure nulla.\nEu est cillum anim et incididunt laborum sint consectetur elit reprehenderit aute consequat non qui irure. Ea proident commodo ex ullamco duis minim do id reprehenderit aliqua deserunt esse duis nulla sit. Elit est nostrud consectetur sint enim duis quis ullamco irure veniam minim ut quis consequat. Sunt aliqua sit eiusmod officia sint aliquip irure tempor culpa sunt. Nulla in eiusmod minim officia est deserunt sunt. Aliquip aute eu quis. Ullamco voluptate aliquip et dolore. Dolore sit dolore do veniam.",
      "sessions": [
        {
          "id": 79751,
          "name": "Building a super performant GossipGirl.com in Gatsby in under 50 Minutes"
        }
      ],
      "name": "Brent Bryant"
    },
    {
      "id": "e3d60e4b-9d07-4dc0-b02d-9d4e3d6ece9b",
      "bio": "Qui ipsum nulla irure sunt labore culpa anim commodo commodo ut magna ipsum ea. Consequat tempor do consequat ipsum aute magna aliqua duis fugiat occaecat. Deserunt anim minim fugiat anim aliqua consectetur proident. Magna voluptate minim proident sit dolor ut fugiat eu laboris cillum. Cillum quis velit pariatur culpa adipisicing ullamco exercitation fugiat. Reprehenderit deserunt amet pariatur aliqua mollit aliqua. Anim excepteur id non ipsum non exercitation tempor nulla commodo deserunt amet anim proident duis excepteur.\nElit irure do nostrud minim laboris non quis ea eiusmod cupidatat. Veniam in enim magna sint. Do mollit elit laborum irure consequat labore tempor cupidatat eu voluptate exercitation do nostrud sunt sit. Consectetur dolor consequat pariatur aliqua veniam minim commodo irure mollit dolor ex.",
      "sessions": [
        {
          "id": 85233,
          "name": "Run Faster: Parallel Programming in C#"
        }
      ],
      "name": "Herbert Adams"
    },
    {
      "id": "86d72d85-ef02-405e-b0de-1603dae6b8fb",
      "bio": "Esse excepteur eu incididunt id officia. Lorem amet aute id laborum adipisicing aliquip mollit eiusmod non qui dolore mollit qui qui sunt. Tempor sint deserunt velit amet nostrud aliquip. Ad minim sunt consequat consequat reprehenderit adipisicing aute voluptate reprehenderit sit magna nostrud.",
      "sessions": [
        {
          "id": 85689,
          "name": "Planning for Failure"
        }
      ],
      "name": "Sam Johnson"
    },
    {
      "id": "6b154a22-5948-4445-a2d5-34f03f9f2887",
      "bio": "Anim voluptate amet officia aliqua esse non. Laborum do ipsum velit aute commodo fugiat esse incididunt. Incididunt sint dolor duis. Exercitation culpa ad anim cupidatat ut fugiat laborum aliqua amet anim ullamco sint. Cillum aliquip deserunt nisi pariatur. Dolor voluptate nostrud pariatur.",
      "sessions": [
        {
          "id": 81375,
          "name": "Taming Styles of Python Programming"
        }
      ],
      "name": "Holland Watkins"
    },
    {
      "id": "75465aaf-45f4-4d3c-b78a-2e3d5206b57f",
      "bio": "Laborum magna voluptate velit ad anim quis eu quis ad enim dolore sit. Excepteur ea sunt qui deserunt commodo esse incididunt est fugiat magna enim ullamco aute eiusmod. Magna elit exercitation ea sit ea. Sit nisi in sunt nisi tempor. Et ex dolor sint laboris consectetur magna officia officia est voluptate aliqua. Laboris voluptate qui aliqua nostrud ad et. Consequat aliqua nostrud officia cillum cupidatat velit enim consectetur do aliquip do reprehenderit tempor est officia.",
      "sessions": [
        {
          "id": 80481,
          "name": "WooHoo, my mobile app is on the store! Now what?"
        }
      ],
      "name": "Kathryn Turner"
    },
    {
      "id": "7603a2ab-66c7-42f0-b9fb-183120f39535",
      "bio": "Esse ea occaecat adipisicing officia. Nisi officia labore laboris proident. Officia incididunt nisi reprehenderit velit. Esse duis sunt incididunt sint qui proident nulla eu culpa cupidatat cillum minim laboris pariatur tempor. Irure fugiat commodo eu ea pariatur. Irure nisi ullamco cupidatat tempor esse laboris sit officia aute dolore. Excepteur aliquip ipsum nulla. Labore do reprehenderit eiusmod excepteur Lorem voluptate exercitation id anim ex.\nEiusmod Lorem velit voluptate veniam proident velit et sint tempor minim sit cillum aute ea. Veniam irure do sit adipisicing Lorem nulla voluptate nulla. Amet aliqua fugiat eu duis dolor ex pariatur dolor ex exercitation consectetur reprehenderit veniam nisi. Est ex minim excepteur enim mollit officia fugiat velit.",
      "sessions": [
        {
          "id": 81958,
          "name": "Java Lambdas & The Stream API - The Basics"
        }
      ],
      "name": "Ainsley Hart"
    },
    {
      "id": "767f8f10-fddc-4212-bf07-df14d7987aba",
      "bio": "Eu nulla tempor nulla culpa incididunt amet non mollit qui duis culpa do. Exercitation amet magna ullamco fugiat dolore elit ipsum reprehenderit eiusmod sunt deserunt pariatur id consectetur sit. Labore reprehenderit adipisicing eu. Mollit dolore ut esse ad veniam amet amet adipisicing mollit. Sint laborum aliquip incididunt id ipsum anim incididunt.",
      "sessions": [
        {
          "id": 130489,
          "name": "Hiring Developers the VU Way"
        }
      ],
      "name": "Tina Fuller"
    },
    {
      "id": "f109dd0b-9441-4cbf-8664-19c021a6de4a",
      "bio": "Ipsum magna ipsum veniam ea nisi occaecat incididunt nostrud adipisicing mollit cupidatat occaecat dolore dolor. Occaecat quis irure est nisi quis adipisicing Lorem eiusmod. Laborum aute duis quis voluptate ipsum qui fugiat commodo ad et eiusmod anim eu. Qui esse cupidatat mollit consectetur aliqua. Excepteur anim id labore magna id ea et nisi irure.",
      "sessions": [
        {
          "id": 85664,
          "name": "Azure Pipelines from Scratch"
        }
      ],
      "name": "Memphis White"
    },
    {
      "id": "266b5537-0164-405b-bbf4-1acefbf4c9f5",
      "bio": "Exercitation ut non anim irure est exercitation dolore pariatur velit excepteur nisi incididunt. Cillum dolor occaecat sunt voluptate enim adipisicing officia. Elit dolor veniam consectetur est nostrud non. Deserunt dolore esse duis consequat incididunt elit duis incididunt duis. Esse magna est mollit sunt excepteur officia. Et elit do velit mollit est exercitation nulla sit consequat nisi. Non proident sunt incididunt. Elit consectetur laborum veniam magna ullamco sit quis veniam fugiat qui.",
      "sessions": [
        {
          "id": 80584,
          "name": "Building a GraphQL Client in JavaScript"
        },
        {
          "id": 80582,
          "name": "Building High Performance React Applications"
        }
      ],
      "name": "Rain Ortiz"
    },
    {
      "id": "873ba8d7-5603-4e09-86eb-2b6da490970a",
      "bio": "Aliquip veniam consectetur in ipsum in. Esse culpa reprehenderit duis. Mollit est aute minim Lorem ex sint veniam consequat deserunt deserunt occaecat nisi. Deserunt enim occaecat culpa sit.\nMagna nostrud proident aute incididunt velit magna fugiat minim laborum. Culpa excepteur fugiat velit ea amet irure est ex est duis. Tempor quis magna in Lorem ullamco enim. Anim ad ipsum ex aliquip.",
      "sessions": [
        {
          "id": 84236,
          "name": "The Gray Areas: Confronting Ethical Challenges in Programming"
        },
        {
          "id": 84234,
          "name": "Less. Better. Let’s Refactor JavaScript"
        }
      ],
      "name": "Courtney Duncan"
    },
    {
      "id": "20b08a85-743d-437d-9ebe-0b7d2a718916",
      "bio": "Adipisicing aliqua occaecat cillum nisi velit adipisicing. Cillum aute do non duis esse ullamco officia. Irure laboris quis aliqua sit qui non ea qui mollit est incididunt qui. Minim sunt est adipisicing laborum velit excepteur quis nostrud reprehenderit qui. Lorem commodo dolore adipisicing elit nisi nulla. Ut officia ipsum ad deserunt ullamco sunt cillum. In sunt exercitation esse ad cupidatat incididunt enim ipsum officia enim dolor nisi exercitation commodo ut.\nCupidatat minim incididunt sunt in adipisicing exercitation exercitation ullamco non consectetur Lorem. Fugiat aute reprehenderit cupidatat nostrud culpa excepteur proident. Deserunt dolor ex cupidatat ullamco dolor qui irure labore magna do sit anim cupidatat reprehenderit. Et nostrud occaecat incididunt sunt est nostrud quis ipsum duis incididunt est eu nostrud laboris elit. Sit et velit eu pariatur nisi qui velit culpa magna. Exercitation eu eu aliqua reprehenderit sit ad reprehenderit ad occaecat. Lorem exercitation cillum id anim aute veniam commodo velit ut amet tempor Lorem aliquip ad. Ad sunt fugiat ea do nisi voluptate quis quis magna dolore.",
      "sessions": [
        {
          "id": 85504,
          "name": "Except for the People"
        }
      ],
      "name": "Ray Owens"
    },
    {
      "id": "87029c5c-0b50-4926-a57c-3af4b7dfe5a5",
      "bio": "Occaecat consequat sunt voluptate cillum esse mollit laboris. Lorem excepteur aliquip deserunt veniam voluptate sint. Velit dolor deserunt ad sunt elit ipsum cillum. Labore non nisi aliqua ullamco laboris anim laborum ullamco id. Aute esse esse sunt deserunt esse nisi ullamco deserunt fugiat. Eu officia incididunt mollit. Labore dolore amet duis.\nDolore voluptate officia mollit duis cillum. Et ut ullamco nostrud aliquip cupidatat. Qui qui proident dolor et laborum adipisicing eu et et sunt. Excepteur aliquip non ad culpa magna labore officia qui esse dolore Lorem. Dolor reprehenderit duis ullamco ipsum magna mollit et et. Minim consectetur nisi est amet mollit aliqua laborum occaecat incididunt. Consectetur ex ullamco excepteur et mollit fugiat irure et ex laborum et velit.",
      "sessions": [
        {
          "id": 85148,
          "name": "Product Discovery Workshop - OKRs, Personas, Storymapping, Oh My"
        },
        {
          "id": 85152,
          "name": "Reflecting on XP-What is working; what has changed; what did we forget?"
        }
      ],
      "name": "Eduardo Terry"
    },
    {
      "id": "a7cd5b14-2051-4d1c-ae92-9d31a76c5dfe",
      "bio": "Quis labore dolore minim ullamco quis ut enim irure est qui. Minim cupidatat anim et esse amet reprehenderit. Cupidatat officia do ullamco aute culpa qui. Incididunt nisi ullamco tempor quis excepteur pariatur sunt cillum mollit ut amet.",
      "sessions": [
        {
          "id": 78183,
          "name": "Machine Learning for .NET developers with ML.NET"
        }
      ],
      "name": "Courtney Romero"
    },
    {
      "id": "96051b9e-ae0d-47fe-95fc-83419f497ba2",
      "bio": "Non commodo magna dolor occaecat consequat. Nostrud est ut exercitation do voluptate nisi ipsum in elit Lorem duis non nostrud. Dolore cillum voluptate elit commodo non anim elit voluptate quis ad aute in ad. Do excepteur consectetur ad duis Lorem anim magna dolore officia exercitation velit non mollit commodo cillum. Nisi cillum aute labore duis exercitation occaecat consectetur sit nostrud occaecat consectetur. Proident esse quis tempor. Magna voluptate do deserunt reprehenderit occaecat do adipisicing. Lorem aute amet laborum cillum dolor nisi voluptate qui fugiat Lorem exercitation ipsum duis ipsum consequat.",
      "sessions": [
        {
          "id": 85213,
          "name": "Agile is a 4 Letter Word"
        }
      ],
      "name": "Suzanne Brown"
    },
    {
      "id": "c028befe-e062-4522-aeae-d7266c785a40",
      "bio": "Ea sit proident occaecat commodo irure incididunt reprehenderit dolor ex aliquip duis. Pariatur aliqua officia elit quis mollit consectetur velit dolor in cupidatat aute. Eu quis eu dolore consequat eu culpa reprehenderit in aliquip exercitation exercitation reprehenderit ea nulla et. Nostrud sint id ad in nulla occaecat mollit.\nCillum amet culpa incididunt id cupidatat aliqua non deserunt Lorem elit incididunt aute. Sunt proident mollit reprehenderit reprehenderit. Excepteur mollit in ut aliqua deserunt nisi sunt ex aute cillum minim. Velit cupidatat laboris labore nostrud minim id culpa esse consectetur.",
      "sessions": [
        {
          "id": 78947,
          "name": "Get to Know Babel"
        },
        {
          "id": 78389,
          "name": "Get More Done with Vue.js"
        }
      ],
      "name": "Arya Carter"
    },
    {
      "id": "d108027a-7e26-46f5-b92d-9f6cb59eb283",
      "bio": "Do est voluptate incididunt labore magna irure minim incididunt. Tempor deserunt aute consequat. Incididunt sunt anim ad deserunt magna reprehenderit dolor duis enim culpa ut. Ut et laborum eu dolore mollit aliqua.",
      "sessions": [
        {
          "id": 82657,
          "name": "The Secrets of Multi-Tenant Applications with ASP.NET Core"
        }
      ],
      "name": "Armani Burns"
    },
    {
      "id": "86b94933-b41b-4b82-8bf3-855c2f90a445",
      "bio": "Laboris in consequat eiusmod culpa non pariatur consectetur nisi ullamco labore ut pariatur exercitation consequat pariatur. Anim enim ullamco ullamco nulla ea ullamco dolore reprehenderit enim cupidatat nisi. Incididunt esse esse officia non ipsum do dolore sunt ipsum laboris ullamco laborum aute enim et. Minim proident cillum laboris culpa. Tempor tempor proident id deserunt elit eu duis dolore consequat laboris ex in. Consequat sit ipsum eu eiusmod. Dolore velit reprehenderit elit. Lorem quis sit mollit occaecat dolor Lorem sit excepteur enim incididunt.\nNisi velit labore nostrud elit quis aliqua eu. Adipisicing adipisicing mollit aliquip officia nostrud reprehenderit ad aliqua exercitation tempor eiusmod. Labore tempor laborum consectetur adipisicing ad cupidatat elit adipisicing tempor ipsum eu veniam do nostrud. Duis consequat aliquip exercitation exercitation est ipsum mollit labore. Proident consectetur anim culpa in ullamco irure pariatur consequat tempor dolore velit voluptate. Nulla in fugiat magna velit mollit commodo velit minim nisi cillum esse. Amet anim dolor nostrud ad mollit pariatur. Duis ea sit occaecat officia minim.",
      "sessions": [
        {
          "id": 80205,
          "name": "Kubernetes: A Cautionary Tale"
        }
      ],
      "name": "Lumi Fisher"
    },
    {
      "id": "3e903f94-c2bf-4543-aa77-9990467f4573",
      "bio": "Qui proident dolore fugiat amet commodo proident pariatur. Officia qui ullamco consequat est eu magna est ex laboris do eu dolore eiusmod. Tempor in do dolor voluptate sit dolor ea aliquip reprehenderit cillum. Dolor dolor aliqua ex aliquip deserunt labore sit eu reprehenderit est amet ullamco aute sunt. Nulla irure nisi ad. Et et non excepteur enim mollit quis labore elit nulla.\nSunt excepteur aute adipisicing anim elit tempor adipisicing aute. Magna magna nisi non irure irure excepteur excepteur minim incididunt fugiat esse. Occaecat tempor aliqua reprehenderit nostrud in dolor pariatur esse. Sunt ad id eu dolore pariatur aliquip. Exercitation commodo dolore aliquip irure cupidatat consectetur sit sunt tempor sit cillum labore.",
      "sessions": [
        {
          "id": 85299,
          "name": "Up and Running with Angular"
        },
        {
          "id": 78075,
          "name": "Zero to Database with EF Core Code First in 60 minutes"
        }
      ],
      "name": "Caroline Ward"
    },
    {
      "id": "fe60954c-9d1a-4167-9faa-77027c8d446b",
      "bio": "Nisi minim ea ea est reprehenderit ad elit aliquip non consectetur officia aliquip et. Laboris nulla labore nostrud mollit laboris labore non consequat ad et aute fugiat velit sunt id. Adipisicing culpa sit nostrud proident pariatur ea irure consectetur do ad dolor veniam. Ipsum duis ipsum excepteur anim eiusmod nulla nulla pariatur nulla amet dolore culpa. Mollit voluptate ipsum commodo quis amet amet reprehenderit enim quis veniam ullamco voluptate commodo aliquip. Labore sint ullamco nostrud sunt quis nulla ad do eu in mollit pariatur. Lorem aute nostrud dolor nostrud voluptate minim aliquip. Quis eu dolore deserunt exercitation velit minim pariatur nulla est quis exercitation.\nSit minim minim culpa non anim qui. Velit fugiat deserunt voluptate incididunt. Exercitation laborum dolor consectetur ipsum qui Lorem ad officia sint Lorem aliqua fugiat irure. Ut eiusmod id duis elit mollit ea pariatur duis velit incididunt reprehenderit deserunt.",
      "sessions": [
        {
          "id": 82459,
          "name": "How not to be the best app no one uses: Effective Onboarding for fun & profit"
        }
      ],
      "name": "Veronica Willis"
    },
    {
      "id": "17e63f26-dfcb-431c-b6e1-e7cad79d595b",
      "bio": "Amet id exercitation ipsum duis dolore duis proident. In consequat reprehenderit elit in commodo consectetur consectetur Lorem. Tempor amet nostrud cupidatat et sunt excepteur commodo aliqua et esse laboris irure reprehenderit. Aliqua nisi sint cillum anim ullamco laborum ullamco duis nostrud incididunt nisi ex culpa minim cupidatat.",
      "sessions": [
        {
          "id": 85223,
          "name": "Designing Clean React Components"
        }
      ],
      "name": "Diana Rice"
    },
    {
      "id": "37313769-11ae-4245-93b3-e6e60d5d187c",
      "bio": "Cillum cupidatat veniam consectetur velit nisi aute est esse. Sit minim consectetur occaecat. Pariatur duis ex veniam cillum culpa consectetur ipsum ad aliqua veniam proident est ullamco eu commodo. Exercitation laboris ut proident dolor aliquip incididunt adipisicing mollit in non aliqua aute Lorem. Enim ea mollit aliqua culpa. Nulla in culpa dolor sit. Do nostrud enim sit cupidatat adipisicing enim mollit irure pariatur. Fugiat sunt ut duis non proident tempor ex proident officia officia enim amet nisi.\nQuis exercitation ut duis. Cupidatat deserunt id ea nisi consequat commodo anim. Magna ullamco sint culpa aute deserunt aliqua eiusmod deserunt exercitation. Laborum laboris elit labore cupidatat veniam nulla veniam sint. Est excepteur est elit veniam sunt et exercitation commodo non incididunt quis sit labore id. In aliquip aute ipsum veniam consequat labore cillum magna fugiat nostrud.",
      "sessions": [
        {
          "id": 78170,
          "name": "A Modern Architectural Review of Text-Based Adventure Games"
        },
        {
          "id": 78169,
          "name": "Enhance Your Career with a Mastermind Group"
        }
      ],
      "name": "Roberto Moore"
    },
    {
      "id": "4267f984-e2b3-48a3-bfdf-f2f67e65c193",
      "bio": "Aliqua irure ut est consectetur minim magna. Fugiat laboris enim aute ad reprehenderit anim mollit ut quis occaecat enim tempor non Lorem. Ipsum nostrud cillum ipsum aute culpa. Pariatur ut cupidatat aliquip tempor ad fugiat velit ipsum in excepteur. Consectetur et velit consectetur est nulla commodo elit.",
      "sessions": [
        {
          "id": 84414,
          "name": "My Team Is Awesome and Yours Is Too"
        }
      ],
      "name": "Paris Snyder"
    },
    {
      "id": "dc58c60e-b851-42ec-ae5d-217b5031c2d3",
      "bio": "Elit aliquip amet eiusmod exercitation. Eiusmod ullamco est magna. In commodo tempor sint deserunt incididunt pariatur in duis fugiat. Et quis esse aliquip nulla deserunt sit fugiat qui duis eiusmod.",
      "sessions": [
        {
          "id": 82361,
          "name": "Modern day C# development in Visual Studio 2019"
        }
      ],
      "name": "Kai Phillips"
    },
    {
      "id": "b8f3c690-5950-4279-9ee7-9291d1439dd2",
      "bio": "Commodo officia laborum velit. Cupidatat consectetur cupidatat non ex tempor dolor voluptate cillum reprehenderit elit proident. Magna enim amet est eu est. Eu minim ea culpa veniam tempor quis officia commodo qui est irure nostrud. Proident ipsum id incididunt voluptate.",
      "sessions": [
        {
          "id": 85060,
          "name": "Creative Coding: An Introduction to Processing"
        }
      ],
      "name": "Robin Garcia"
    },
    {
      "id": "97d0da3a-5496-4a8c-9025-99f000e3d834",
      "bio": "Deserunt nisi sit qui nostrud minim Lorem voluptate ullamco anim ullamco do qui eiusmod. Culpa mollit in laboris nostrud commodo ut. Amet sit laborum irure veniam. Ut excepteur ut Lorem occaecat anim cillum aute. Nisi nisi eiusmod officia ea incididunt aute cupidatat id elit dolore eu elit consequat quis labore. Fugiat ut qui duis. Veniam nulla cillum ullamco sunt minim enim ut excepteur ex exercitation id. Minim non cillum amet qui labore sint amet do.",
      "sessions": [
        {
          "id": 85763,
          "name": "Modernizing QA"
        }
      ],
      "name": "Steven Campbell"
    },
    {
      "id": "2e2d0824-03f9-428d-ba85-0594558ffa3c",
      "bio": "Eu consectetur voluptate veniam excepteur sunt excepteur sit ad eiusmod excepteur eiusmod voluptate minim. Ea officia minim ipsum. Mollit enim laborum sint do cupidatat ad et. Irure anim cillum occaecat do ea cillum mollit do sunt pariatur voluptate consectetur. Irure commodo eu sunt anim adipisicing duis irure fugiat laborum magna cillum ipsum. Ut cillum dolor fugiat aliquip ex et id laborum proident exercitation Lorem Lorem. Ut anim labore amet pariatur sit esse nisi nostrud est exercitation eiusmod duis elit mollit. In esse consequat culpa laborum exercitation eu consequat ad ipsum commodo est ad anim ut sint.",
      "sessions": [
        {
          "id": 77744,
          "name": "A Software Engineer's Guide to DevOps"
        }
      ],
      "name": "Wallis Reyes"
    },
    {
      "id": "f4f1eb31-8574-4e8a-a94a-ee0aef8c28d5",
      "bio": "Ipsum id deserunt non labore. Aliqua incididunt duis eu ex irure fugiat enim velit. In reprehenderit sunt laboris laboris non tempor fugiat esse dolore elit officia commodo incididunt. Amet nostrud do ut est pariatur veniam. Quis id quis exercitation excepteur aliqua anim. Ipsum do ad proident officia esse excepteur adipisicing et.",
      "sessions": [
        {
          "id": 77253,
          "name": "I'm Going To Make You Stop Hating CSS."
        },
        {
          "id": 77252,
          "name": "CMS Speed Dating"
        }
      ],
      "name": "Julian Richardson"
    },
    {
      "id": "964af3ac-fd5e-46f6-b582-6c0d2da30db4",
      "bio": "Aliqua ad deserunt fugiat ea et pariatur ad dolore magna. Ipsum sunt mollit est incididunt incididunt veniam duis. Proident et proident sit esse nostrud dolore aliquip ad. Commodo sunt ut ea magna exercitation occaecat enim consequat excepteur sit fugiat.\nEst aliquip cupidatat ullamco non sit tempor dolore do duis eu nisi. Exercitation ut dolor in sunt sunt dolore dolore anim aute dolor quis aliquip duis occaecat. Ipsum aliqua incididunt ad velit reprehenderit elit commodo ut qui eu. Veniam ut laboris tempor incididunt minim excepteur ullamco cillum culpa quis non. Sint proident officia est labore magna dolor nostrud fugiat exercitation exercitation amet voluptate Lorem. Nisi pariatur consequat consequat occaecat magna do deserunt ex ad eu dolor. Aliquip magna proident quis mollit amet nulla adipisicing officia exercitation ex Lorem consectetur.",
      "sessions": [
        {
          "id": 134099,
          "name": "What vulnerabilities? Live hacking of containers and orchestrators"
        }
      ],
      "name": "Alex Bennett"
    },
    {
      "id": "0b54cbcb-37aa-4ad2-b222-77d78475b209",
      "bio": "Consectetur sint ipsum tempor commodo excepteur laboris. Commodo elit magna laborum officia velit tempor veniam consequat labore amet aute in dolor. Eu ullamco et sint minim cupidatat occaecat nisi voluptate velit. Ex tempor adipisicing exercitation tempor elit eu est reprehenderit occaecat consequat quis.\nOccaecat Lorem mollit et proident qui quis quis ad elit minim officia. Cillum sint est voluptate non laborum occaecat irure laborum id sunt est in dolore magna tempor. Laborum consectetur enim Lorem reprehenderit enim. Aliquip ut quis velit eiusmod eu adipisicing officia in.",
      "sessions": [
        {
          "id": 78511,
          "name": "Implementing Zero Downtime Application Deployments on Azure PaaS"
        }
      ],
      "name": "Billie Nguyen"
    },
    {
      "id": "05be364d-a57f-4e08-978d-8043d43db097",
      "bio": "Et esse aliquip elit ipsum eu dolor in ea ea consectetur ipsum deserunt esse esse consectetur. Ipsum non anim Lorem Lorem commodo. Excepteur proident ut aliquip in est irure irure pariatur quis nulla do sunt occaecat minim. Cillum mollit enim est deserunt eiusmod eu ea officia excepteur eiusmod ipsum dolore aute ea nostrud. Consectetur reprehenderit et elit velit consequat non laborum nulla laborum nisi amet. Velit Lorem dolore eiusmod duis culpa eiusmod Lorem voluptate nisi veniam esse proident eu excepteur aliqua.\nUt voluptate consectetur esse. Ut occaecat magna proident amet nisi laborum nisi occaecat occaecat elit sint magna qui. Sint et duis qui eiusmod magna magna dolore sit irure. Sint est ad consequat amet ad consequat nisi. Minim quis incididunt cupidatat irure eiusmod in exercitation. Commodo adipisicing quis duis aliqua aute. Pariatur non in nostrud veniam adipisicing enim fugiat sunt commodo veniam amet.",
      "sessions": [
        {
          "id": 83833,
          "name": "Building Reactive Pipelines: How to go from scalable apps to (ridiculously) scalable systems"
        },
        {
          "id": 83831,
          "name": "Drinking from the Stream: How to Use Messaging Platforms for Scalability & Performance"
        }
      ],
      "name": "Ken Sanchez"
    },
    {
      "id": "3336b62f-c81b-4892-8247-d34043767210",
      "bio": "Eu sunt adipisicing qui cupidatat ipsum nulla. Duis labore in aliqua. Adipisicing occaecat deserunt est mollit minim excepteur Lorem. Pariatur culpa consequat et non occaecat adipisicing et nulla ea nisi. Velit commodo cupidatat consequat mollit nostrud sunt nostrud dolor mollit nostrud culpa reprehenderit adipisicing elit. Officia officia et excepteur occaecat labore incididunt nulla id incididunt.\nDo cillum voluptate qui dolore dolore deserunt magna eiusmod velit tempor. Nostrud ex do non excepteur ad est mollit veniam consectetur dolore consectetur proident quis laborum. Amet sunt in mollit proident aliquip aute velit irure et enim pariatur consectetur. In cillum aliquip qui aute occaecat incididunt. Laborum laborum incididunt veniam sit velit dolore labore. Id dolore adipisicing velit ullamco ea cupidatat non deserunt ipsum et commodo cillum cillum incididunt magna. Do cillum amet incididunt culpa sit commodo aliqua dolore duis in dolor elit pariatur.",
      "sessions": [
        {
          "id": 79654,
          "name": "Accessibility Basics"
        },
        {
          "id": 79655,
          "name": "Tables have their place, now let’s make them fit"
        }
      ],
      "name": "Perrie Dunn"
    },
    {
      "id": "e2712384-1dff-4eb7-8dbf-77e621e4d274",
      "bio": "Officia sunt consequat sint do. Cupidatat ex culpa aute voluptate commodo aute proident non dolor duis minim duis culpa irure. Non minim minim duis adipisicing in consequat et amet occaecat ad sint enim cupidatat consequat Lorem. Elit dolore sit sint nostrud proident esse mollit fugiat excepteur.\nOfficia ullamco reprehenderit minim veniam amet eu dolor ex esse est culpa. Do reprehenderit nulla voluptate laboris laboris commodo anim ea. Ullamco consequat ut incididunt reprehenderit labore dolor culpa anim ullamco quis exercitation. Excepteur officia exercitation dolore qui do reprehenderit et duis aute. Nostrud id velit sunt officia et tempor incididunt esse.",
      "sessions": [
        {
          "id": 80263,
          "name": "Reactive for the impatient"
        }
      ],
      "name": "Justice Harper"
    },
    {
      "id": "fcbad4dc-96b5-4624-9fcc-16561ea44394",
      "bio": "Amet tempor nisi dolor ea ipsum ipsum sit nulla voluptate culpa eiusmod. Eu dolore sit sint nulla est nisi dolor ipsum laboris excepteur. Consequat dolor aliquip proident pariatur minim occaecat enim. Duis aute mollit magna fugiat ea adipisicing enim aliqua non esse quis elit sint anim.",
      "sessions": [
        {
          "id": 78152,
          "name": "Rock-Solid Components with TypeScript and GraphQL"
        }
      ],
      "name": "Rylan Fowler"
    },
    {
      "id": "55118daf-09db-4e61-a5b6-c2661640c3d2",
      "bio": "Elit id veniam nisi ut. Aliqua et nostrud cupidatat cupidatat esse qui consequat in ipsum pariatur. Ut sunt ut qui quis consectetur cupidatat veniam do nostrud sunt. Et consectetur anim esse dolore esse mollit velit id magna.",
      "sessions": [
        {
          "id": 80749,
          "name": "Full Stack Reactive with React and Spring WebFlux"
        },
        {
          "id": 80748,
          "name": "Spring Boot APIs and Angular Apps: Get Hip with JHipster!"
        }
      ],
      "name": "Ashton Dunn"
    },
    {
      "id": "7834c5b6-3b35-459b-94f7-020de94de36f",
      "bio": "Officia cillum ea sit adipisicing do tempor ut enim. Excepteur velit sint irure irure enim ut deserunt sunt consectetur ex laboris. Amet reprehenderit in ut aliqua occaecat tempor est. Anim reprehenderit anim id voluptate officia magna cupidatat veniam aute ut officia sint labore. Exercitation irure aliqua aute id occaecat qui tempor esse cupidatat ex deserunt officia consectetur quis sunt. Occaecat reprehenderit occaecat deserunt do tempor culpa culpa reprehenderit id reprehenderit ipsum labore ipsum.\nEiusmod veniam eu eu culpa laborum pariatur Lorem in ea consectetur. Sunt ipsum anim ea eu occaecat amet aliqua. Commodo cillum consectetur in sunt ut. Nostrud cupidatat labore ut et. Ipsum dolore in velit id laboris anim reprehenderit dolore. Voluptate proident nisi tempor qui qui. Nisi incididunt non excepteur amet in ut mollit incididunt minim aliquip pariatur nulla consequat ea.",
      "sessions": [
        {
          "id": 130081,
          "name": "The Importance of Selecting the Right Recruiter"
        }
      ],
      "name": "Mark Horton"
    },
    {
      "id": "51971bf5-3126-4aae-9825-76a0064c8c78",
      "bio": "Cillum esse deserunt ea irure consequat nulla aliqua laborum adipisicing velit sit quis mollit excepteur est. Eiusmod aliqua laboris sint do consequat id dolore fugiat veniam commodo excepteur officia amet duis duis. Dolor fugiat do cupidatat est ut tempor eu aliqua laborum et reprehenderit tempor nisi. Eu tempor elit mollit laboris magna cupidatat deserunt consequat enim esse pariatur Lorem ad.\nOfficia officia dolor exercitation. Cillum exercitation laborum magna excepteur ea do ex mollit duis nostrud fugiat ipsum. Nostrud quis qui dolore sint in laborum minim velit elit laborum. Eu consequat voluptate consectetur non esse quis pariatur voluptate cillum dolore ipsum laborum laborum. Nostrud laboris consequat mollit deserunt esse velit fugiat incididunt aute est cillum nostrud laborum.",
      "sessions": [
        {
          "id": 83020,
          "name": "Background Tasks Without a Separate Service: Hangfire for ASP.NET"
        }
      ],
      "name": "Kevin Moreno"
    },
    {
      "id": "c8980a1c-98c9-4763-adb9-1295250f18ea",
      "bio": "Et commodo sint id occaecat. In ad velit veniam aliqua velit. Exercitation amet labore nostrud sit voluptate occaecat in nulla exercitation do culpa duis anim Lorem. Adipisicing cupidatat nulla laborum esse voluptate qui aute officia. Veniam non id sunt proident enim consectetur irure commodo mollit proident et cupidatat ut sunt pariatur. Sit ullamco veniam laboris amet laborum voluptate enim et magna tempor deserunt tempor. Eu elit esse adipisicing officia. Consectetur aliquip occaecat culpa laborum elit occaecat nostrud.\nAd magna culpa dolore veniam quis anim. Occaecat ipsum aliqua labore sunt duis ex do ea eiusmod mollit esse velit. Voluptate incididunt duis consequat esse aute consectetur. Ut excepteur velit enim labore do nostrud id in laboris proident ex. Adipisicing ea cupidatat qui consectetur labore sunt aliquip adipisicing nulla.",
      "sessions": [
        {
          "id": 85531,
          "name": "Getting Started with Artificial Intelligence"
        }
      ],
      "name": "Tara Wade"
    },
    {
      "id": "d87a8517-8cc1-4867-8461-e496c143ded2",
      "bio": "Elit qui do ex aliquip dolor in veniam voluptate culpa reprehenderit esse. Elit ipsum nulla sunt esse ea officia cillum exercitation et adipisicing veniam consectetur occaecat. Et esse est est voluptate cupidatat aute amet ea. Id ex ex proident eu aliquip. Sunt pariatur enim deserunt laboris mollit incididunt in irure officia veniam dolor. Sit aliquip ex do et sunt et aliqua consectetur non esse ad.",
      "sessions": [
        {
          "id": 100073,
          "name": "Practical Application of The Modern Testing Principles"
        }
      ],
      "name": "Dakotah Cox"
    },
    {
      "id": "e5aad250-139d-4a16-9c6e-d3534bbe1fc6",
      "bio": "Nostrud eu pariatur elit eiusmod consequat. Et labore aliquip commodo incididunt enim sunt id do ut quis. Eu aliqua aliqua laborum consequat sunt eu occaecat culpa irure ullamco nostrud ad ex tempor id. Nulla incididunt dolor duis. Culpa aliqua consectetur pariatur nisi ea enim consectetur sit id cupidatat fugiat dolor consequat.",
      "sessions": [
        {
          "id": 84370,
          "name": "OAuth 2.0 and OpenID Connect (In Plain English)"
        }
      ],
      "name": "Lori Coleman"
    },
    {
      "id": "5e1781fc-720f-4fb6-b1f1-42fcd793686d",
      "bio": "Veniam amet irure culpa amet exercitation cupidatat sit dolor reprehenderit exercitation voluptate velit. Aliqua consequat et et occaecat veniam. Consectetur sunt magna anim incididunt Lorem ad labore adipisicing exercitation culpa qui cillum do esse voluptate. Id velit aliqua magna eiusmod esse ea consequat quis consequat nostrud et ullamco. Laborum eiusmod aliquip non deserunt aute est veniam exercitation eu duis consectetur irure. Occaecat culpa laboris ex proident ullamco nulla.\nLaboris sit proident consequat quis excepteur laboris qui dolor culpa consectetur. Nostrud ex cillum voluptate proident id ipsum voluptate labore est. Excepteur irure ad aliquip sint est. Labore nulla irure consequat sunt proident qui amet culpa duis excepteur. Incididunt eu cupidatat dolore ex dolore fugiat culpa voluptate dolore consectetur tempor. Consequat est voluptate aute ullamco ut.",
      "sessions": [
        {
          "id": 83983,
          "name": "A Shared Understanding through example mapping"
        }
      ],
      "name": "Amy Anderson"
    },
    {
      "id": "9849b607-154a-40f0-8b96-35f2d9f2b516",
      "bio": "Ex sunt amet labore sint ad est dolor aliqua. Do nostrud cillum cillum occaecat officia qui anim laborum commodo cillum aliqua ex. Do ad aliquip nostrud ea tempor nostrud exercitation fugiat Lorem laboris ipsum veniam reprehenderit mollit. Tempor sint laboris aliqua. Aute ea elit exercitation. Quis labore proident veniam dolore. Quis aliqua eu pariatur. Incididunt fugiat mollit voluptate laborum ex dolor labore.\nNulla ad officia enim laborum in nostrud. Pariatur ut id veniam sunt velit exercitation eu elit laborum magna amet aliquip id duis eiusmod. Duis amet qui duis aute. Dolor duis do commodo anim anim ullamco. Aliquip consequat anim excepteur.",
      "sessions": [
        {
          "id": 79654,
          "name": "Accessibility Basics"
        }
      ],
      "name": "Heather Mendoza"
    },
    {
      "id": "33785725-f004-4291-aa85-393263e3018b",
      "bio": "Ut ad culpa ad sit labore velit ullamco qui eu sit ex eiusmod. Ex sint proident incididunt. Ut fugiat sit proident dolore proident mollit occaecat. Nostrud non occaecat id quis ullamco enim consequat commodo labore consectetur et dolore ullamco sunt cupidatat. Ipsum nostrud cupidatat consectetur nulla do nostrud qui occaecat minim. Nulla in eu laboris cupidatat culpa dolore incididunt et nulla culpa dolor est cillum.\nVelit voluptate fugiat exercitation consequat duis reprehenderit fugiat deserunt. Cillum magna officia do reprehenderit officia tempor eiusmod. Anim cillum culpa consequat adipisicing anim dolor et nulla eu ullamco commodo Lorem cupidatat incididunt. Mollit adipisicing proident consectetur.",
      "sessions": [
        {
          "id": 78086,
          "name": "Thinking in SQL"
        }
      ],
      "name": "Quincy Foster"
    },
    {
      "id": "2118346d-1f8d-410b-af3b-ff0fbcd0f661",
      "bio": "Adipisicing velit elit labore aute occaecat elit est magna ad. Aliqua elit culpa laboris quis irure mollit amet id excepteur amet. Laboris aliqua consectetur ea ea aute duis dolor nisi non dolore proident. Tempor minim nostrud Lorem culpa excepteur occaecat nulla excepteur officia.\nDolore anim incididunt nisi consequat exercitation cillum sunt id nulla aute nostrud. Pariatur magna incididunt duis aliqua et cillum esse dolore. Pariatur do occaecat irure est incididunt elit duis nostrud velit. Dolore est dolor est minim laborum quis ex sunt dolore amet cupidatat veniam do exercitation exercitation. Pariatur quis ut voluptate ex adipisicing. Deserunt Lorem sint ipsum duis minim.",
      "sessions": [
        {
          "id": 85338,
          "name": "Serverless App Starter Kit: How to choose a cloud provider."
        }
      ],
      "name": "Vicki Gordon"
    },
    {
      "id": "30213cef-3674-4ab1-b259-4301519da1b5",
      "bio": "Pariatur deserunt anim sit enim ex officia minim. Anim aute proident enim dolore excepteur deserunt dolore proident elit. Dolore amet nisi commodo dolore esse ex reprehenderit sit incididunt labore est velit ad aliqua. Esse cillum nisi consequat ad duis Lorem. Id ea aliqua culpa. Fugiat cupidatat eu nisi aute reprehenderit occaecat cupidatat.\nDo esse amet culpa commodo voluptate amet ea dolor cupidatat deserunt aliqua deserunt fugiat. Velit voluptate incididunt amet ad aliquip occaecat non. Eu occaecat veniam qui eu in tempor enim pariatur. Incididunt amet veniam aliquip voluptate culpa irure qui occaecat in laborum proident tempor aute nulla ullamco. Tempor culpa irure commodo tempor. Non est excepteur irure est adipisicing eiusmod veniam minim et enim consequat laboris consequat.",
      "sessions": [
        {
          "id": 80550,
          "name": "Continuous Delivery with Azure DevOps"
        }
      ],
      "name": "Nicholas Patterson"
    },
    {
      "id": "952d3b14-a231-4cc6-a97f-95940dac3fa5",
      "bio": "Do proident ut elit laborum. Cillum quis dolore tempor elit enim laboris nulla officia cillum est dolore nulla Lorem magna. Qui qui duis nostrud anim elit sit reprehenderit. Consectetur non non sint ea. Ipsum aliqua excepteur cupidatat non aliqua proident non ad ut id ut. Ex proident adipisicing reprehenderit officia. Eiusmod tempor commodo aute mollit eiusmod veniam anim esse fugiat est pariatur sunt sint. Voluptate labore nulla laborum aliqua eiusmod aliqua proident in mollit do.\nAliquip mollit incididunt qui veniam dolor. Pariatur Lorem do nostrud officia id nostrud in occaecat sint eiusmod eu ex consequat. Deserunt elit proident mollit pariatur eiusmod tempor laborum non ullamco quis est. Velit in aliquip nisi id eu mollit. Proident occaecat magna consectetur. Officia pariatur in voluptate dolor tempor quis cillum et id cillum. Magna labore fugiat ad magna sunt anim consectetur pariatur duis eu ad laborum fugiat nostrud.",
      "sessions": [
        {
          "id": 133591,
          "name": "Permit to Cloud: Landing with Confidence in Azure"
        }
      ],
      "name": "Kay Brooks"
    },
    {
      "id": "daccf3ad-4033-467e-a0f9-e6404e73d5a3",
      "bio": "Ipsum consequat reprehenderit quis anim. Voluptate excepteur non sit. Esse elit fugiat laboris laboris commodo laborum dolore veniam nostrud quis incididunt proident. Aute ea ullamco enim enim aute elit nisi est ad in nisi. Ea nulla non sunt nulla enim aute consectetur cupidatat commodo ipsum ad occaecat. Esse deserunt aliquip aliquip nisi. Consequat veniam nisi excepteur ipsum mollit. Lorem ut mollit eiusmod magna commodo anim irure ipsum exercitation qui reprehenderit eu fugiat.",
      "sessions": [
        {
          "id": 80615,
          "name": "Progressive Web Apps across all frameworks"
        }
      ],
      "name": "Scout Jensen"
    },
    {
      "id": "8f3683fe-0760-487b-8a9d-9fbebfaf6bc7",
      "bio": "Veniam exercitation et exercitation reprehenderit pariatur non minim veniam anim ex nisi adipisicing mollit excepteur dolor. Labore magna nulla do qui non enim esse. Sint sunt tempor eu non consequat officia cupidatat deserunt sit cupidatat qui incididunt sit Lorem incididunt. Duis cillum id sunt duis occaecat. Excepteur et culpa minim pariatur pariatur exercitation mollit aute Lorem deserunt fugiat excepteur irure. Officia id sunt proident. Laborum dolore nostrud qui id eiusmod consectetur ullamco.",
      "sessions": [
        {
          "id": 84375,
          "name": "Automate Everything: A Deep Dive into Jenkins Pipelines"
        }
      ],
      "name": "Brandy Terry"
    },
    {
      "id": "6ccbc829-6939-4346-8f3e-78d495cd7360",
      "bio": "Aliqua magna occaecat commodo aliquip aute ex ad sint commodo est. Labore et reprehenderit nulla labore laborum officia elit eiusmod esse sit Lorem enim. Et fugiat enim Lorem tempor dolore laborum aute culpa. Proident et commodo pariatur ullamco esse pariatur cupidatat ipsum veniam. Magna proident deserunt irure esse consectetur aliqua irure. Eu qui labore ea laboris eu sit occaecat laboris sint nostrud reprehenderit dolore labore.",
      "sessions": [
        {
          "id": 77734,
          "name": "Focus on People"
        },
        {
          "id": 79565,
          "name": "Building a Custom CSS Framework Was Easier Than I Thought"
        }
      ],
      "name": "Minnie Carter"
    },
    {
      "id": "a61320bd-c544-45a8-9dc5-ae4ef3b29f21",
      "bio": "Sit est veniam occaecat id voluptate voluptate excepteur ea elit pariatur eiusmod officia. Duis velit adipisicing nulla commodo. Incididunt in esse et. Aute irure consectetur fugiat dolore mollit. Duis cupidatat sit eu exercitation mollit in proident aute non. Cupidatat aliquip reprehenderit in fugiat deserunt. Eiusmod elit nostrud consectetur aute in incididunt qui cupidatat laborum et irure anim et.",
      "sessions": [
        {
          "id": 133918,
          "name": "Continuous Reliability: An agile process to deliver higher quality applications"
        }
      ],
      "name": "Terry Hopkins"
    },
    {
      "id": "789a1a16-7230-437e-b10e-a5763dc45d89",
      "bio": "Sunt minim velit do reprehenderit consectetur velit mollit ullamco fugiat veniam non sint do laboris sint. Mollit occaecat eu laborum non ut pariatur pariatur exercitation ad ut ad dolore cillum. Dolor ipsum fugiat sunt excepteur elit sit aliqua non officia amet ad. Ut consequat officia ad labore cupidatat pariatur adipisicing. Mollit labore ex ex esse consectetur. Voluptate aliquip non Lorem nisi proident duis ut cillum esse nulla sunt ea consequat nisi. Eiusmod deserunt voluptate nulla dolor nisi dolore do pariatur sunt mollit qui consequat eiusmod ullamco consectetur.",
      "sessions": [
        {
          "id": 85757,
          "name": "The ASP.NET Identity Ecosystem from 35,000 feet"
        }
      ],
      "name": "River Lewis"
    },
    {
      "id": "18f368cc-86e7-4921-9f9a-587e7ef037ea",
      "bio": "Fugiat dolore velit amet sint in elit ipsum occaecat deserunt irure ex sit. Enim sunt deserunt eu velit veniam tempor. Do occaecat ad elit irure velit ullamco ut commodo. Amet ad amet minim. Occaecat aliqua nostrud ut sunt ea. Tempor nisi anim fugiat. Est exercitation do aliqua id adipisicing et irure do occaecat culpa. Eiusmod exercitation excepteur eiusmod amet laboris incididunt.\nMagna elit pariatur eiusmod ea sint ut ad ex elit do reprehenderit consectetur. Minim amet id consectetur minim. Laboris non commodo fugiat veniam magna amet proident enim. Et qui dolor laborum consectetur voluptate elit fugiat anim. Aute officia quis ipsum. Laborum ea reprehenderit irure elit nostrud. Do quis ea do sunt qui ut in duis culpa voluptate. Aliquip consectetur labore minim adipisicing tempor tempor.",
      "sessions": [
        {
          "id": 101352,
          "name": "Mirror mirror on the wall, what is the vainest metric of them all?"
        }
      ],
      "name": "Kim Garcia"
    },
    {
      "id": "cc548afc-e882-41fd-8c2e-6f23cd9f3631",
      "bio": "Cupidatat nulla do nulla dolore cupidatat cupidatat cillum non. Quis nulla aliqua exercitation reprehenderit magna id elit aute. Nisi velit proident consectetur voluptate sint minim est sunt labore adipisicing sit mollit aute esse. Dolor cillum officia ullamco magna sint occaecat voluptate aliqua cillum. Nulla elit cupidatat in aliquip.",
      "sessions": [
        {
          "id": 84677,
          "name": "Moving to ASP.NET Core 2.X"
        },
        {
          "id": 84687,
          "name": "Versioning ASP.NET Core APIs"
        }
      ],
      "name": "Brandy Davidson"
    },
    {
      "id": "e87c804d-b551-4614-8891-007f421a683f",
      "bio": "Minim occaecat enim aute cillum nisi in ex consequat deserunt veniam aliqua voluptate occaecat aliqua. Exercitation non aliquip ipsum excepteur consectetur cupidatat nisi anim proident. Nisi elit laboris nostrud enim ad eiusmod id ut eiusmod ipsum occaecat ipsum non incididunt. Aliqua nisi duis eiusmod esse fugiat id cupidatat. Culpa minim voluptate id. Cillum duis velit minim voluptate laborum culpa ad cillum tempor elit adipisicing et.",
      "sessions": [
        {
          "id": 131951,
          "name": "Serverless hands-on!"
        },
        {
          "id": 82575,
          "name": "Serverless architecture fundamentals"
        }
      ],
      "name": "Ivan Garrett"
    },
    {
      "id": "2f1d872f-af19-4a18-8244-af4d43c11ed2",
      "bio": "Reprehenderit esse consectetur laborum est eu aliqua dolore deserunt pariatur magna mollit cillum. Velit est duis veniam. Excepteur ipsum veniam in cupidatat proident laboris. Laborum deserunt deserunt est laborum elit nulla exercitation laboris adipisicing aute est fugiat Lorem labore. Cillum non adipisicing ipsum velit ad aliqua dolor. Sint Lorem mollit nostrud. Labore Lorem dolore duis sunt velit adipisicing reprehenderit nisi sit exercitation.\nLaboris amet Lorem incididunt enim. Amet aliquip dolore incididunt irure laboris adipisicing aliquip laborum ut. Proident minim occaecat ex non ad quis. Fugiat et mollit incididunt nisi ipsum labore magna nostrud laborum enim mollit duis consectetur.",
      "sessions": [
        {
          "id": 85288,
          "name": "Useful Cryptography, An Introduction"
        },
        {
          "id": 85287,
          "name": "12 Factors of Pain and Suffering"
        }
      ],
      "name": "Jade Neal"
    },
    {
      "id": "b607ef18-f773-4302-9f02-ed2533795501",
      "bio": "Deserunt laborum sunt sint adipisicing sint ea. Exercitation consequat sunt sit. Amet elit irure veniam. Sint deserunt labore duis. Aute anim commodo enim exercitation velit esse magna do ipsum excepteur ullamco elit. Ex excepteur anim laboris labore excepteur nisi culpa nisi velit voluptate eiusmod ea. Consectetur adipisicing tempor anim aute sint et excepteur id fugiat. Reprehenderit amet ad labore anim et.\nNostrud aliqua fugiat aliqua amet nisi cupidatat ea officia id laboris qui Lorem elit in. Laboris dolor labore aliquip eu excepteur dolor cillum in dolor aliquip irure ipsum consequat exercitation. Mollit amet eu ullamco. Dolore occaecat veniam laboris sint consequat laboris elit do id nulla exercitation nisi. Duis esse commodo sunt.",
      "sessions": [
        {
          "id": 129743,
          "name": "Web Services Using Azure Functions"
        }
      ],
      "name": "Darryl Reid"
    },
    {
      "id": "b1655789-7394-4979-9c93-ada3ee56dd45",
      "bio": "Ea elit aute incididunt id ad elit anim duis deserunt laborum velit eiusmod anim. Officia anim ex adipisicing consequat. Fugiat aute voluptate incididunt cillum est commodo officia ut ea consectetur nostrud. Proident in ex laborum elit pariatur do nisi magna ipsum ut cillum proident magna. Id aute laboris aliquip culpa officia. Irure velit do velit labore in ullamco. Nisi labore esse mollit eu aliquip nulla. Consectetur consequat laboris sunt minim pariatur culpa eiusmod velit.\nLaboris consectetur in commodo tempor ea in occaecat laborum Lorem irure ipsum exercitation ex sit. Amet proident do officia ipsum consectetur id minim et. Amet dolor esse aute aliqua ullamco in occaecat nisi proident occaecat amet ad cillum fugiat excepteur. Fugiat enim magna eiusmod incididunt exercitation et sint. Enim consectetur incididunt cillum. Duis do in aliqua id ad dolor duis pariatur proident cupidatat sunt esse aute.",
      "sessions": [
        {
          "id": 79200,
          "name": "Inclusive Diversity: Do You Want to Build a Bracelet?"
        }
      ],
      "name": "Easton Ford"
    },
    {
      "id": "d4d7850a-526e-4959-aab1-36460081fcf5",
      "bio": "Est cillum sint magna exercitation voluptate nisi ea anim est minim. Enim mollit minim consectetur laborum sint anim amet culpa consectetur ipsum. Ea fugiat quis proident cillum qui elit nulla non amet et nostrud ipsum. Non anim ipsum ut velit proident pariatur labore incididunt voluptate elit fugiat exercitation. Cillum aute incididunt aute magna nisi reprehenderit minim ea proident ex cupidatat occaecat dolore. Sit cupidatat et sit aute excepteur. Nisi consequat nisi est aliqua velit nulla laboris magna ullamco. Non Lorem occaecat non sit id voluptate labore sit deserunt aute.",
      "sessions": [
        {
          "id": 85347,
          "name": "Building Trust in Teams"
        },
        {
          "id": 85343,
          "name": "The Moon: Gateway to the Solar System"
        },
        {
          "id": 85344,
          "name": "The History of .NET"
        }
      ],
      "name": "Jesse Hill"
    },
    {
      "id": "e2187bee-02a6-492b-9706-452f5748f473",
      "bio": "Exercitation consequat ex deserunt. Eiusmod et sunt laborum cupidatat. Ad dolor qui et do sunt qui proident. Eu sunt tempor amet.\nSit non qui veniam dolor officia dolor occaecat. Sint ipsum cillum occaecat ipsum id qui. Nisi sunt tempor mollit mollit do cillum velit aute laborum do amet aliqua dolore. Deserunt aute nostrud occaecat laboris dolor laborum proident voluptate enim eiusmod nulla.",
      "sessions": [
        {
          "id": 80310,
          "name": "Build a DevOps Pipeline for .NET Apps and Databases (Workshop)"
        },
        {
          "id": 80313,
          "name": "Database DevOps with Containers"
        }
      ],
      "name": "Erik Peters"
    },
    {
      "id": "e9ef29b1-ab04-4328-ba58-38b1c047e0bf",
      "bio": "Dolore Lorem exercitation sit magna eiusmod incididunt dolor minim deserunt voluptate occaecat ad. Consequat ad nostrud ullamco duis et in nisi occaecat officia elit. Labore qui adipisicing sunt velit ut dolor est incididunt eu irure id eu. Occaecat aliquip minim incididunt elit veniam esse culpa amet aliqua cupidatat incididunt.\nOccaecat magna reprehenderit consectetur id aute pariatur est eu irure eiusmod ut cupidatat sint id nostrud. Labore et mollit sunt consectetur dolore deserunt proident dolor. Esse esse Lorem pariatur voluptate laborum laborum excepteur cupidatat ipsum ea magna. Eiusmod mollit officia qui in minim ex magna dolore id et do adipisicing culpa. Proident eu ea sunt ullamco adipisicing laboris aute sit officia enim aliquip nulla eiusmod cupidatat.",
      "sessions": [
        {
          "id": 82606,
          "name": "When Azure AD is Not Enough: Creating a Token Service in ASP.NET Core 2.2"
        },
        {
          "id": 82611,
          "name": "Lightning fast connected data with graph databases"
        }
      ],
      "name": "Ray Gardner"
    },
    {
      "id": "46baf7d8-70c6-48c1-b098-995f8c16cebf",
      "bio": "Ea ullamco Lorem quis velit exercitation enim id labore. Fugiat ipsum dolore reprehenderit. Ad non non dolore dolor ullamco reprehenderit est velit culpa incididunt nostrud. Eiusmod pariatur occaecat consectetur et ex. Duis tempor minim deserunt ad Lorem laboris duis ut qui mollit sit elit ex. Ad ex irure qui sunt pariatur ad labore reprehenderit minim in aute veniam esse consequat. Irure consectetur nisi laborum aliquip duis.\nDuis irure exercitation est. Deserunt commodo consequat occaecat nostrud id irure non. Qui consectetur tempor exercitation sit irure Lorem esse dolor duis esse esse dolore. Elit deserunt adipisicing minim qui velit labore exercitation exercitation nostrud aute cillum sunt tempor aliqua pariatur. Velit duis do eiusmod id est exercitation anim. Sit reprehenderit incididunt mollit do amet cupidatat duis elit ea dolore ad incididunt ut.",
      "sessions": [
        {
          "id": 134818,
          "name": "MongoDB Best Practices with Cerner Corporation"
        }
      ],
      "name": "Charles Bennett"
    },
    {
      "id": "fc1d0cd3-9675-4188-aa98-e0088069f1a4",
      "bio": "Voluptate ut quis in ullamco anim minim adipisicing eiusmod incididunt voluptate voluptate. Consequat nostrud mollit ipsum velit et ullamco deserunt est labore et in aute. Eu ea ea id. Nostrud ipsum reprehenderit do exercitation officia. Minim do eu in fugiat exercitation ipsum labore ad nulla. Laborum reprehenderit quis duis. Velit anim nisi ea nulla qui ea non cillum anim labore incididunt anim deserunt culpa. Quis eu id irure do Lorem amet eiusmod tempor culpa cillum.\nAd dolore aliquip est et laborum labore minim dolor occaecat quis quis adipisicing. Proident culpa reprehenderit nostrud nostrud adipisicing ipsum reprehenderit mollit sunt culpa nisi. Enim laborum in enim non officia. Voluptate excepteur aliquip sint in mollit id quis et fugiat. Ipsum elit nisi labore laboris.",
      "sessions": [
        {
          "id": 84040,
          "name": "Essential Tools for Xamarin Developers!"
        }
      ],
      "name": "Terry Holland"
    },
    {
      "id": "845c2ecb-81d1-4d6e-a027-040bbfa3fac6",
      "bio": "Occaecat duis sunt consectetur ullamco velit esse esse. Lorem velit tempor non ea mollit incididunt excepteur Lorem nulla. Sit esse labore laborum cupidatat. Elit eiusmod nostrud ad aute fugiat commodo labore proident anim culpa. Aliquip laborum fugiat ipsum minim laboris aliquip velit aliqua officia exercitation dolor laboris tempor. Aliquip minim consequat ea laboris nulla nulla dolore voluptate. Voluptate qui do id occaecat occaecat irure. Esse eiusmod laboris eiusmod.",
      "sessions": [
        {
          "id": 85670,
          "name": "Use Design Thinking to Bridge The Great Divide"
        },
        {
          "id": 84485,
          "name": "Angular and The Case for RxJS"
        }
      ],
      "name": "Don Harvey"
    },
    {
      "id": "a79c25d1-632c-4ae9-aff9-9375a97c0eaf",
      "bio": "Amet voluptate incididunt consequat quis culpa ut deserunt quis labore id elit commodo ad dolor. Commodo do adipisicing velit exercitation veniam. Irure Lorem nisi deserunt. Adipisicing qui nulla laborum eiusmod enim Lorem laborum esse. Consequat fugiat cillum ea exercitation. Exercitation tempor nisi magna dolor deserunt id sit dolor non irure ea occaecat tempor. Ut ad nisi laboris proident.",
      "sessions": [
        {
          "id": 81734,
          "name": "Don't Rewrite, React!"
        },
        {
          "id": 85788,
          "name": "Working Remote & Parenting, Balancing Both and Still Remembering to Shower"
        }
      ],
      "name": "Ashley Holt"
    },
    {
      "id": "2bc073d6-864b-464f-b7bd-f8e60c02f2bd",
      "bio": "Fugiat tempor Lorem proident anim laborum magna pariatur. Magna sint magna duis non aliqua ad elit. Proident aliquip in mollit ipsum veniam aute est ullamco cupidatat laborum consequat laborum pariatur. Magna deserunt irure excepteur laboris. Ipsum irure ex et esse velit esse nisi cupidatat. Consectetur culpa occaecat sint mollit sit ut ea aute. Cillum excepteur proident aute nisi officia voluptate eiusmod non incididunt occaecat ad irure.\nAd commodo adipisicing ut laboris mollit amet proident deserunt tempor ex proident excepteur proident laboris sunt. Enim cillum eiusmod id velit Lorem anim labore. Sint sunt aliqua commodo excepteur incididunt laboris. Et culpa excepteur elit mollit. Aliquip culpa eiusmod laborum id exercitation nostrud excepteur culpa elit proident consequat labore fugiat. Reprehenderit commodo incididunt anim. Qui exercitation officia incididunt reprehenderit sint magna ut elit exercitation quis ex consequat adipisicing. Sunt ullamco sit aute occaecat elit veniam reprehenderit nisi exercitation.",
      "sessions": [
        {
          "id": 135924,
          "name": "Getting Kids Excited about STEM"
        }
      ],
      "name": "Marjorie Collins"
    },
    {
      "id": "30121199-8f71-47bf-a041-4cfde046a02c",
      "bio": "Nisi aliquip reprehenderit minim aliquip id. Commodo commodo incididunt sit sit laboris mollit exercitation tempor. Aliquip et est eiusmod ad dolor aliqua. Sunt sint ea id officia Lorem minim elit aute tempor irure qui.\nNon labore Lorem aliqua sit dolor magna laborum nostrud deserunt deserunt minim tempor tempor pariatur. Qui exercitation enim officia nisi dolor quis ut culpa nisi magna anim. Dolore occaecat adipisicing laborum adipisicing anim sunt nulla voluptate nisi ea consectetur mollit. Enim esse tempor est sint dolore reprehenderit voluptate eu ea aliquip nulla voluptate. Elit duis duis ullamco tempor consectetur cillum non adipisicing laborum qui.",
      "sessions": [
        {
          "id": 81915,
          "name": "Protecting App Secrets with .NET Core and Azure"
        }
      ],
      "name": "Ramon Brewer"
    },
    {
      "id": "7331e43a-2424-4f1e-a43b-bb8976f61504",
      "bio": "Irure Lorem exercitation voluptate nisi eiusmod sit eiusmod aliquip nulla occaecat. Amet proident nostrud ad non ad proident. Ipsum et mollit proident sunt pariatur qui non mollit mollit quis do. Magna exercitation deserunt do id voluptate.\nProident non incididunt culpa veniam veniam ad nisi aliquip nulla. Duis deserunt minim eiusmod pariatur nostrud dolore eiusmod non quis non sint. Excepteur do occaecat quis commodo velit nisi ad nisi deserunt minim amet et esse adipisicing. Excepteur anim cillum quis tempor incididunt eiusmod dolore commodo proident laboris velit. Nostrud excepteur sint elit consequat sit dolor eiusmod quis ad sit est occaecat anim. Commodo officia ipsum ad magna velit aliquip. Laboris eiusmod laboris incididunt in enim ut do incididunt ipsum.",
      "sessions": [
        {
          "id": 85753,
          "name": "Browser-Native Web Accessibility"
        }
      ],
      "name": "Milton Wagner"
    },
    {
      "id": "8f9f5411-8e27-4c2f-bc01-fc682342c44c",
      "bio": "Aliquip aliqua velit sint nulla irure nulla amet duis. Ad consequat veniam consectetur officia fugiat cillum culpa pariatur adipisicing officia consectetur ut ullamco proident. Quis sit commodo deserunt ex eu fugiat sunt aliquip do esse reprehenderit duis ea. Laborum velit duis exercitation in ea. Ipsum tempor ea sint laboris. Nostrud magna amet deserunt est ea irure deserunt nulla mollit minim magna ut. Ea deserunt culpa voluptate reprehenderit sint ad ex incididunt qui pariatur. Duis enim ad Lorem sunt.\nEsse in cillum fugiat ex consectetur enim. Incididunt est enim aliquip quis aliqua nostrud. Aute sint officia ex excepteur. Laborum exercitation magna enim. Aliquip in enim aliquip aliquip enim.",
      "sessions": [
        {
          "id": 77828,
          "name": "SQL Server DevOps"
        },
        {
          "id": 77805,
          "name": "Explaining HTTP Security Headers You Need On Your Website"
        }
      ],
      "name": "Bergen Jackson"
    },
    {
      "id": "e8ba7975-be40-4dd4-9d19-3a7cdab26cbb",
      "bio": "Eiusmod proident fugiat nostrud exercitation ut aliqua irure velit culpa tempor voluptate dolor. Ad cillum sit esse ex. Duis labore ullamco sunt sint tempor nulla ad aute in. Et amet esse sit deserunt deserunt aliqua qui sit ut ut sint tempor officia. Dolor tempor dolore sit proident dolor labore enim tempor magna nulla. Sint esse aliqua commodo id id sit ea velit irure officia voluptate proident reprehenderit aute. Nulla velit reprehenderit voluptate culpa nulla nisi culpa laboris. Proident magna dolor tempor cillum id amet sit amet eu amet excepteur qui.",
      "sessions": [
        {
          "id": 85801,
          "name": "The iOS App of Your Eye"
        }
      ],
      "name": "Miguel Ellis"
    },
    {
      "id": "60e31e1b-2d77-4f36-8e11-4d9f8b639bc8",
      "bio": "Fugiat minim esse ea aliquip irure. Enim enim est qui officia. Enim ad irure occaecat cupidatat sit. Id ipsum tempor pariatur culpa duis id ad cillum nulla officia. Culpa ea aliquip cillum consequat laboris do ut ad velit est ex magna ullamco adipisicing. Do laborum reprehenderit nulla reprehenderit aliquip consequat ex consequat est. Enim tempor labore anim minim reprehenderit. Qui duis reprehenderit duis est ad deserunt id.\nId sunt mollit et aliquip velit elit aute eiusmod fugiat exercitation. Reprehenderit occaecat est reprehenderit nulla esse exercitation amet consectetur. Nostrud sunt esse consectetur deserunt adipisicing laborum ullamco occaecat mollit commodo aliquip est et. Excepteur reprehenderit occaecat nisi nostrud exercitation irure irure occaecat est incididunt. Quis enim id elit elit.",
      "sessions": [
        {
          "id": 84969,
          "name": "Microservices -- The Easy Way is the Wrong Way"
        }
      ],
      "name": "Joe Lopez"
    },
    {
      "id": "8de6a283-f104-432b-ad08-f775a5fae6a4",
      "bio": "Magna ut irure voluptate veniam in nisi anim Lorem ipsum adipisicing laboris velit consequat exercitation sint. Enim eiusmod exercitation amet aliquip laboris cillum ullamco. Sit nulla amet est deserunt consectetur. Officia sit ex labore laboris. Adipisicing id aliquip labore cupidatat. Mollit reprehenderit enim sunt eu exercitation ea adipisicing voluptate eu labore ea veniam consequat excepteur. Minim sint duis aute sit commodo.\nIrure reprehenderit veniam laboris amet. Ipsum ipsum incididunt nisi. Veniam laboris cillum nisi sint laborum et eiusmod sunt amet cupidatat quis dolor veniam. Ut consequat enim commodo veniam pariatur aliqua. Ut veniam nostrud nulla. Proident occaecat aliquip culpa nulla enim. Pariatur irure laboris ipsum ex dolore velit aliquip ea consequat qui deserunt sunt quis. Culpa tempor cupidatat ullamco officia nulla incididunt sunt officia labore ad culpa nulla.",
      "sessions": [
        {
          "id": 85264,
          "name": "Single Codebase for Web and Native Mobile"
        },
        {
          "id": 85256,
          "name": "Choosing between React Native and Flutter"
        },
        {
          "id": 84548,
          "name": "Not screwing up Encryption as a Developer"
        }
      ],
      "name": "Sally Watts"
    },
    {
      "id": "583e8f08-8316-4ed2-afdf-4cd091e44564",
      "bio": "Aute quis do excepteur. Velit duis exercitation sunt irure ipsum qui adipisicing irure mollit labore culpa aliquip quis. Est dolor culpa cillum ut ullamco non mollit incididunt. Pariatur Lorem ipsum cillum labore ullamco quis. Qui consectetur enim ea. Do et voluptate ad duis sint incididunt non nisi magna est aute et dolore aliquip sit. Commodo esse dolor cupidatat laborum culpa magna.\nSint aute quis eu duis velit nisi officia amet. Nisi culpa esse qui in elit magna irure elit labore laboris nostrud ullamco exercitation. Laborum cupidatat minim irure. Do elit excepteur deserunt in eu nostrud quis veniam. Culpa elit anim culpa consectetur enim. Est labore pariatur reprehenderit.",
      "sessions": [
        {
          "id": 85605,
          "name": "Designing and Implementing REST APIs For The Long Haul"
        }
      ],
      "name": "Clifton Larson"
    },
    {
      "id": "2bda8276-b7b6-4653-a7c5-1bcc59d11a49",
      "bio": "Nisi velit minim laboris velit dolor ea enim magna mollit. Minim voluptate commodo magna sint velit mollit quis elit. Minim excepteur esse est minim qui nostrud excepteur deserunt. Dolor officia dolor do irure ullamco eu non dolor. Amet adipisicing laboris duis eiusmod. Id tempor non laborum eu. Deserunt laboris qui consequat aute ullamco ut culpa adipisicing duis consequat magna aute ipsum magna.",
      "sessions": [
        {
          "id": 84473,
          "name": "Advanced Secure Programming for the Enterprise in .NET"
        },
        {
          "id": 84475,
          "name": "Scaling Agile in your Organization with the Spotify Model"
        }
      ],
      "name": "Jean Ryan"
    },
    {
      "id": "a25e6534-f680-4487-83da-9f58329af3a9",
      "bio": "Commodo dolor ut duis ut. Non incididunt est laboris et reprehenderit ea veniam laboris esse pariatur Lorem velit eu do eiusmod. Tempor veniam nulla velit excepteur et adipisicing proident ipsum. Exercitation qui cillum aute eu. Laborum dolor ut dolor laboris occaecat et. Aliquip minim commodo cillum incididunt sit magna nulla culpa labore.\nEt et velit Lorem ullamco aliqua mollit. Magna voluptate occaecat veniam nisi exercitation ullamco proident in elit esse velit enim duis. Ex nisi nostrud anim exercitation fugiat qui fugiat deserunt eu reprehenderit pariatur aliqua elit cupidatat in. Voluptate anim nostrud mollit dolore quis pariatur ea nulla id officia nisi culpa veniam eu amet. Nisi veniam sunt commodo veniam aliquip dolor amet laborum aliquip sint est.",
      "sessions": [
        {
          "id": 82049,
          "name": "Building Quality JavaScript With Test-Driven Development"
        },
        {
          "id": 82048,
          "name": "10 Things You'll Love About React"
        }
      ],
      "name": "Willie Wells"
    },
    {
      "id": "14099b63-5162-4db7-986c-79879b90f627",
      "bio": "Lorem veniam non veniam do nulla. Ea eu duis occaecat in veniam nisi ullamco elit. Veniam laborum Lorem sunt. Non deserunt aliquip nulla deserunt adipisicing eiusmod occaecat elit pariatur nulla excepteur deserunt. Voluptate dolor cillum dolore et ipsum voluptate ipsum ut minim ut aliquip sint deserunt elit. Commodo ipsum exercitation ullamco sint.\nLorem ea sint anim. Laborum quis ad elit incididunt do sunt voluptate sint aliqua est dolore. Adipisicing ad nisi exercitation occaecat cupidatat et id commodo sint magna dolore id minim magna id. Enim aliqua culpa minim irure elit eiusmod commodo aliquip voluptate non. Dolor nulla deserunt esse aute eiusmod proident eiusmod ea dolore cupidatat.",
      "sessions": [
        {
          "id": 85701,
          "name": "Building an OAuth Flow in a Node.js CLI"
        }
      ],
      "name": "Gillian Hansen"
    },
    {
      "id": "fbcde9d0-ed63-48d5-ba6d-9cff8296fdd2",
      "bio": "Non magna sit in nulla nisi ipsum sit irure. Do ipsum ad et labore nostrud. Anim proident proident qui irure. Sunt aliqua cillum eiusmod est aute ex aute officia dolor pariatur in fugiat. Consequat cillum aute veniam eu irure. Non cupidatat tempor reprehenderit sunt reprehenderit fugiat aute ad adipisicing elit. Ea sit officia proident laborum reprehenderit sit.\nReprehenderit pariatur sint consequat minim consequat. Nisi proident elit ad qui velit in consequat magna occaecat. Esse eu Lorem do anim in incididunt velit commodo voluptate. Sint Lorem irure culpa sunt proident eiusmod tempor Lorem. Labore nisi pariatur incididunt esse nulla veniam ullamco qui elit. Commodo Lorem est quis sit non in incididunt.",
      "sessions": [
        {
          "id": 85015,
          "name": "Busy Developer's Guide to NoSQL"
        },
        {
          "id": 85009,
          "name": "Busy Developer's Guide to Naked Objects"
        }
      ],
      "name": "Sydney Holland"
    },
    {
      "id": "cb70e0f2-0f0b-4b8f-b3f4-a9326309a1b2",
      "bio": "In et voluptate culpa id non labore reprehenderit ex pariatur velit qui amet excepteur. Nisi non sunt mollit mollit minim laboris pariatur dolore tempor labore nisi Lorem laboris. In laborum nulla reprehenderit aute non anim enim nisi exercitation adipisicing. Dolor do consectetur reprehenderit sunt reprehenderit sunt do ullamco ad quis adipisicing. Elit nisi eu Lorem excepteur nostrud tempor laborum do duis nisi in veniam est in. Officia veniam anim qui deserunt. Ea quis fugiat magna ad. Consequat duis eiusmod quis quis dolore laborum tempor deserunt non in amet.\nDeserunt est exercitation ut nulla tempor ullamco. Adipisicing incididunt excepteur enim Lorem quis non consectetur dolore et fugiat tempor laborum exercitation. Elit ullamco elit dolor tempor minim ea consequat cupidatat dolore dolor velit quis labore laboris consectetur. Non consequat proident eiusmod esse. Eu et commodo occaecat elit incididunt excepteur occaecat esse aliquip consectetur nisi.",
      "sessions": [
        {
          "id": 132719,
          "name": "Deep Learning and Computer Vision in Practice"
        }
      ],
      "name": "Sutton Carlson"
    },
    {
      "id": "da1f3c6b-ce55-48df-824c-c6f681f77f8c",
      "bio": "Incididunt veniam ullamco deserunt nulla. Sunt culpa et sit sit velit veniam quis sunt ex tempor laboris incididunt ex incididunt. Proident id sint proident pariatur cillum est ea ex. Consequat ea do magna esse aliqua nulla sit. Enim quis laborum do esse quis eu consequat ad veniam eiusmod nisi deserunt elit adipisicing. Enim ad commodo eiusmod cupidatat cillum dolore dolor in nostrud consectetur. Nostrud ea duis qui sit esse exercitation deserunt dolor in officia. Quis esse duis tempor reprehenderit commodo qui.",
      "sessions": [
        {
          "id": 81905,
          "name": "The Automation Firehose: Be Strategic and Tactical"
        }
      ],
      "name": "Kyle Nichols"
    },
    {
      "id": "5f017dbb-6821-480b-a750-82a0f15fa1b2",
      "bio": "Reprehenderit occaecat et incididunt ex sit. Enim irure duis velit consectetur amet ad laborum duis velit adipisicing fugiat anim tempor labore. Culpa duis ullamco laboris in officia. Eiusmod irure non laboris aute nostrud Lorem deserunt officia. Duis incididunt anim velit ea laborum occaecat sit magna.",
      "sessions": [
        {
          "id": 81938,
          "name": "Software Testing from Failed Projects"
        }
      ],
      "name": "Marie Wagner"
    },
    {
      "id": "172a6669-38c5-46ec-b262-3290e8aa41e3",
      "bio": "Occaecat non cillum consequat enim sunt commodo ea nisi labore exercitation ullamco quis aute commodo. Elit irure magna nostrud proident nulla nostrud deserunt proident deserunt nulla laboris. Mollit mollit aliqua Lorem esse aute consequat consequat culpa ad qui ipsum. Cupidatat commodo eiusmod exercitation magna in tempor. Qui anim ipsum dolore quis eu culpa do culpa enim. Magna voluptate nisi cupidatat aliquip deserunt cupidatat. Qui velit aliqua proident. Do deserunt elit elit velit veniam.\nCupidatat ut elit aliquip non aute aliquip laborum non. Commodo consequat ut esse commodo incididunt sit cupidatat est. Tempor magna magna incididunt dolore anim dolor incididunt sint. Duis nulla non officia aliquip deserunt qui sunt enim do ut proident sunt. Sit anim occaecat ullamco tempor eiusmod nisi. Ut commodo nulla incididunt ut deserunt labore proident labore consequat. Id reprehenderit duis proident sunt aliquip labore voluptate deserunt. Nisi reprehenderit aute sint et esse officia cillum sit.",
      "sessions": [
        {
          "id": 84376,
          "name": "An Introduction to Kotlin"
        }
      ],
      "name": "Joan Jordan"
    },
    {
      "id": "58e984a0-a08a-47a6-98b0-63744b8f6671",
      "bio": "Commodo nulla est incididunt id dolore aliqua sunt officia cillum nisi cillum sunt sunt qui. Cillum elit do id nostrud voluptate adipisicing officia eiusmod consequat velit magna eiusmod. Veniam aliqua sint irure proident cupidatat ipsum. Eu proident non est cillum do labore sint voluptate aliqua id aliqua quis ad. Elit mollit exercitation consequat eu aute voluptate aute officia ipsum magna exercitation nisi. Irure deserunt minim exercitation pariatur in occaecat eiusmod est. Sunt nulla do ipsum. Adipisicing dolor veniam veniam ut reprehenderit in ipsum mollit esse occaecat laborum incididunt tempor.\nReprehenderit ullamco proident do elit cupidatat excepteur ex commodo nulla in et veniam. Exercitation consequat fugiat ea ipsum dolor deserunt velit Lorem irure enim ipsum tempor deserunt do. Nostrud occaecat aliquip qui ex qui qui est ipsum cupidatat nostrud dolore est duis consectetur. Proident fugiat ex consequat do. Consectetur anim nostrud pariatur pariatur tempor anim ullamco irure. Id officia fugiat commodo est. Reprehenderit exercitation adipisicing dolor consectetur sint culpa sit irure do duis exercitation proident irure id tempor. Ut excepteur Lorem non ullamco Lorem et cillum cillum nulla exercitation nisi voluptate est ullamco.",
      "sessions": [
        {
          "id": 85696,
          "name": "\"Criminal Minds\" meets the JVM: an intro to profiling"
        }
      ],
      "name": "Wallis Bell"
    },
    {
      "id": "e0e499cf-3b89-41a3-a346-9884ab6e35d8",
      "bio": "Incididunt id Lorem ipsum labore elit qui dolore pariatur aliqua reprehenderit culpa ex. Do ut in magna occaecat est labore eiusmod sint. Ad esse ad ut anim non eu. Consectetur et officia aliqua nulla anim pariatur commodo minim laborum adipisicing consectetur. Nulla do magna reprehenderit tempor esse reprehenderit Lorem sit. Deserunt veniam consectetur fugiat elit sint laboris ipsum eiusmod sint non do duis qui laboris ullamco. Consectetur reprehenderit reprehenderit amet non non incididunt sint dolor quis deserunt do. Ullamco nostrud officia eiusmod ullamco excepteur excepteur cillum mollit eu.",
      "sessions": [
        {
          "id": 99790,
          "name": "Leveraging AI for Good"
        }
      ],
      "name": "Bowie Sanchez"
    },
    {
      "id": "f6873ff8-e7a8-40db-895b-118a33c069e0",
      "bio": "Officia anim Lorem adipisicing exercitation aute culpa excepteur dolore nulla ex ex dolor labore. Veniam reprehenderit anim do enim cillum sunt do cillum irure. Cillum ipsum quis fugiat in magna Lorem ad Lorem duis ea nisi eu id mollit id. Labore sit tempor veniam cillum excepteur qui nisi nisi consectetur mollit. Consectetur culpa cupidatat cillum sint excepteur eiusmod ullamco.\nEsse irure ea cillum elit consectetur Lorem. Amet occaecat ex minim et laborum nostrud nisi qui nisi proident adipisicing incididunt ullamco. In eiusmod ex irure nisi nisi elit ea aliqua irure non sint consequat culpa velit occaecat. Excepteur elit reprehenderit voluptate ipsum nostrud ea elit irure non fugiat minim. Cillum do ullamco culpa. Occaecat sint id quis anim ad in veniam laborum aliquip consectetur ipsum non incididunt ullamco qui.",
      "sessions": [
        {
          "id": 84216,
          "name": "Forecasting: A #NoEstimates Workshop"
        }
      ],
      "name": "Craig Johnston"
    },
    {
      "id": "1fefdbea-9cc1-4f84-9001-a0df076a8f45",
      "bio": "Quis elit officia irure ipsum tempor occaecat et duis irure elit. Occaecat amet in aliqua labore est incididunt. Anim ipsum aute do quis non occaecat tempor proident duis nostrud ad labore ea. Commodo nisi cillum do est elit in. Ex quis in officia.\nMagna cillum ea exercitation ullamco nisi commodo. Ex ea aliqua quis sit exercitation exercitation non incididunt reprehenderit ex veniam amet dolor aliquip ullamco. Enim magna ea velit magna proident in laboris officia consectetur. Duis id tempor incididunt eiusmod qui laboris mollit deserunt ex in aliqua in laboris. Consectetur eiusmod eiusmod cupidatat officia sint magna enim in est excepteur.",
      "sessions": [
        {
          "id": 77795,
          "name": "0-60 with NativeScript + Angular"
        },
        {
          "id": 77798,
          "name": "60-120 with NativeScript + Angular"
        }
      ],
      "name": "Rhonda Peters"
    },
    {
      "id": "41302283-03b9-4876-8f7c-67298c0ac3a0",
      "bio": "Nisi non ullamco occaecat velit ad irure laboris dolore cupidatat veniam. Aliqua mollit cillum anim magna non officia adipisicing ipsum consequat anim qui id ex. Veniam cupidatat id aliqua pariatur in consequat ullamco commodo ea aute nisi. Aute quis magna officia consectetur mollit nisi in ullamco. Reprehenderit consequat aliquip sit incididunt id cupidatat deserunt enim consectetur qui aute consequat sint enim. Ipsum sint et ex exercitation qui.\nFugiat eu dolor eu nostrud irure Lorem veniam labore dolore amet eu mollit. Anim laboris labore nostrud tempor ex proident sunt reprehenderit reprehenderit ullamco do mollit. Dolor Lorem laboris veniam mollit eiusmod. Sunt deserunt fugiat sunt amet sint duis cillum in laboris irure fugiat sint aliquip. Dolore ex proident amet dolor aute proident do. Anim amet enim qui incididunt ea culpa ullamco nisi cupidatat enim fugiat excepteur sint laborum. Labore nulla id proident aliqua elit.",
      "sessions": [
        {
          "id": 79048,
          "name": "Akka Streams for Mere Mortals"
        }
      ],
      "name": "Alexander Snyder"
    },
    {
      "id": "0294b93f-bac4-4d29-808f-2acaa72d4385",
      "bio": "Irure ullamco in consequat ad ea proident. Anim incididunt eiusmod eiusmod id non nisi ut est officia anim ea. Pariatur laborum et id. Ea laborum labore amet culpa officia nostrud culpa dolor. Ullamco consectetur velit velit nostrud anim laboris culpa.\nQui enim ipsum deserunt amet deserunt consequat laborum quis. Est officia dolor amet cillum enim et adipisicing Lorem. Aute voluptate ut reprehenderit incididunt et qui aute est do ea dolore aliquip magna sint adipisicing. Incididunt magna adipisicing incididunt irure consectetur commodo ipsum pariatur cupidatat. Proident adipisicing adipisicing aliqua adipisicing velit consectetur mollit adipisicing proident sunt ad aute est. Et consequat sint non et non nisi sit laboris nostrud laboris.",
      "sessions": [
        {
          "id": 84701,
          "name": "Understand your brain to build better visualizations."
        }
      ],
      "name": "Keith Garcia"
    },
    {
      "id": "0dd4d8eb-9a32-4b95-94bc-a6f51c4b5253",
      "bio": "Consequat adipisicing duis non do officia non sint adipisicing ex aute. Sint Lorem ipsum consequat quis dolor non dolore ullamco amet occaecat dolor. Sunt non non aute qui aute adipisicing cupidatat nisi. Irure sint deserunt in Lorem eiusmod proident reprehenderit fugiat ex laborum et dolore. Veniam veniam dolore aliquip incididunt adipisicing ea minim esse culpa magna sint culpa pariatur. Fugiat id enim incididunt deserunt do aliquip. Amet et est culpa exercitation culpa cupidatat pariatur dolore labore culpa aute Lorem veniam. Nisi in nulla esse excepteur reprehenderit id cillum eiusmod laboris elit qui excepteur.",
      "sessions": [
        {
          "id": 134778,
          "name": "Build more agreeable microservices"
        }
      ],
      "name": "Leslie Bates"
    }
  ]
}"},"revalidate":31536000}